import{j as e,r,B as m}from"./index-CTMRbn_K.js";import{L as f}from"./leaflet-BAca6HWN.js";import{c as Te,P as ae,T as d}from"./Typography-C1Zn5gF3.js";import{T as N,A as ve,U as ue,E as Le}from"./Edit-CjR9tEb9.js";import{f as O,C as H,A as ne,D as Ie,T as oe,L as ze,h as Pe,i as _e,j as Re,F as Ee,N as Me,d as pe,x as De,a as ge,b as me,c as he,e as xe}from"./TextField-NHcxytlY.js";import{L as Ne,S as de}from"./Place-CMvfnJDh.js";import{A as se,a as ie,E as le,b as ce}from"./ExpandMore-CgKiz1Ka.js";import{B as W}from"./Button-DO8BiWcF.js";import{D as $e}from"./Delete-DEZzwJ3q.js";import{T as Fe}from"./Timeline-BqNzYsAN.js";import{R as Ge,a as fe}from"./RadioGroup-DH87oDju.js";import{M as ye}from"./Map-G3xA4zvs.js";import{D as Oe,M as Be,E as Ue}from"./Menu-BTXZxF-s.js";import{A as We}from"./Assessment-BuzCfUAA.js";import{S as Ve}from"./Settings-bh29N-tE.js";import{I as Je}from"./Info-BzI1RQVM.js";import"./Popper-CkAs7sEn.js";import"./FormGroup-Csm5lx81.js";const qe=Te(e.jsx("path",{d:"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4m8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7"})),He=({stations:u,jurisdictionBoundary:h,coverageStandard:V,onStationAdd:J,onStationSelect:X,onAnalysisUpdate:M,analysisTriggered:$})=>{const q=r.useRef(null),p=r.useRef(null),g=r.useRef(!1),[x,Q]=r.useState(!1),[j,I]=r.useState(!1),[s,l]=r.useState({stations:!0,isochrones:!0,gaps:!0,boundaries:!0}),[w,S]=r.useState("idle"),[Z,P]=r.useState([]),[D,_]=r.useState([]),b={nfpa1710:{name:"NFPA 1710 (Career Departments)",travelTime:240,responseTimeGoal:480,coverageGoal:90,travelSpeed:35},nfpa1720:{name:"NFPA 1720 (Volunteer Departments)",travelTime:480,responseTimeGoal:600,coverageGoal:80,travelSpeed:35}}[V],B=r.useCallback(()=>{if(!(!q.current||p.current))try{f.Icon.Default.mergeOptions({iconRetinaUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png",iconUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png",shadowUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png"});const n=f.map(q.current).setView([39.8283,-98.5795],4);f.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"¬© OpenStreetMap contributors",maxZoom:19}).addTo(n),console.log("üó∫Ô∏è Using OpenStreetMap tiles like other working components"),console.log("üó∫Ô∏è Leaflet marker icons configured with CDN URLs"),p.current=n,Q(!0),console.log("üó∫Ô∏è Coverage map initialized successfully"),n.on("click",k)}catch(n){console.error("‚ùå Failed to initialize coverage map:",n),S("error")}},[]),k=r.useCallback(n=>{if(!j||!J)return;const{lat:t,lng:o}=n.latlng,a={station_id:`STATION_${Date.now()}`,station_name:"New Station",latitude:t,longitude:o,station_type:"engine",operational_status:"active"};J(a),I(!1),console.log("üöí New station placed at:",t,o)},[j,J]),R=r.useCallback(()=>{if(!(!p.current||!x))try{const n=p.current;if(n.eachLayer(t=>{t.options&&t.options.stationType==="station"&&n.removeLayer(t)}),u.forEach(t=>{const o=f.marker([t.latitude,t.longitude],{stationType:"station"}).addTo(n),a=`
          <div>
            <h4>${t.station_name}</h4>
            <p><strong>ID:</strong> ${t.station_id}</p>
            <p><strong>Type:</strong> ${t.station_type||"Unknown"}</p>
            <p><strong>Apparatus:</strong> ${t.apparatus_count||"N/A"}</p>
            <p><strong>Status:</strong> ${t.operational_status||"Unknown"}</p>
          </div>
        `;o.bindPopup(a),o.on("click",()=>{X&&X(t)})}),u.length>0){const t=f.latLngBounds(u.map(o=>[o.latitude,o.longitude]));n.fitBounds(t,{padding:[50,50]})}console.log("üìç Updated",u.length,"station markers")}catch(n){console.error("‚ùå Failed to update station markers:",n)}},[u,x]),v=r.useCallback(()=>{var n;if(!(!p.current||!x))try{const t=p.current;if(t.eachLayer(o=>{o.options&&o.options.layerType==="boundary"&&t.removeLayer(o)}),h&&s.boundaries){console.log("üó∫Ô∏è Adding jurisdiction boundary to map");const o=f.geoJSON(h,{layerType:"boundary",style:{color:"#ff6b35",weight:3,opacity:.8,fillColor:"#ff6b35",fillOpacity:.1,dashArray:"5, 5"}}).addTo(t);if(h.features&&((n=h.features[0])!=null&&n.properties)){const a=h.features[0].properties,i=`
            <div>
              <h4>${a.name||"Jurisdiction Boundary"}</h4>
              ${a.population?`<p><strong>Population:</strong> ${a.population.toLocaleString()}</p>`:""}
              ${a.area_sq_miles?`<p><strong>Area:</strong> ${a.area_sq_miles} sq miles</p>`:""}
              ${a.county?`<p><strong>County:</strong> ${a.county}</p>`:""}
              ${a.state?`<p><strong>State:</strong> ${a.state}</p>`:""}
            </div>
          `;o.bindPopup(i)}u.length===0&&t.fitBounds(o.getBounds(),{padding:[20,20]}),console.log("‚úÖ Jurisdiction boundary added to map")}}catch(t){console.error("‚ùå Failed to update jurisdiction boundary:",t)}},[h,x,s.boundaries,u.length]),C=r.useCallback(async()=>{if(!(!p.current||!x||u.length===0)){if(g.current){console.log("üîÑ Isochrone generation already in progress, skipping...");return}g.current=!0,S("analyzing");try{const n=p.current;n.eachLayer(i=>{i.options&&i.options.layerType==="isochrone"&&n.removeLayer(i)});const t=u.map(async i=>F(i));(await Promise.all(t)).forEach((i,A)=>{i&&E(i,u[A])}),S("complete");const a=ke();M&&M(a),console.log("‚úÖ Generated isochrones for",u.length,"stations")}catch(n){console.error("‚ùå Failed to generate isochrones:",n),S("error")}finally{g.current=!1}}},[u,x,b]),F=async n=>{const t=b.travelTime/60,o=b.travelSpeed*1609.34*t/60;return{center:[n.latitude,n.longitude],radius:o,travelTime:b.travelTime,stationId:n.station_id}},E=(n,t)=>{if(p.current)try{const o=p.current;f.circle(n.center,{radius:n.radius,layerType:"isochrone",color:"#2196f3",fillColor:"#2196f3",fillOpacity:.1,weight:2}).addTo(o).bindPopup(`
        <div>
          <h4>${t.station_name} Coverage</h4>
          <p><strong>Travel Time:</strong> ${n.travelTime/60} minutes</p>
          <p><strong>Standard:</strong> ${b.name}</p>
        </div>
      `)}catch(o){console.error("‚ùå Failed to add isochrone to map:",o)}},c=r.useCallback(async()=>{if(!p.current||u.length===0){console.warn("Cannot perform analysis: missing map or stations");return}S("analyzing"),console.log("üîç Starting comprehensive coverage gap analysis...");try{const n=u.map(i=>{const A=b.travelTime/60,T=b.travelSpeed*1609.34*A/60;return{station:i,center:[i.latitude,i.longitude],radius:T,coverageCircle:f.circle([i.latitude,i.longitude],{radius:T})}}),t=await ee(n);P(t);const o=re(t);_(o);const a=Se(n,t);Ce(t),we(o),S("complete"),M&&M({...a,gaps:t,recommendations:o,totalStations:u.length,coverageStandard:V,analysisDate:new Date().toISOString()}),console.log("‚úÖ Coverage analysis complete:",{gaps:t.length,recommendations:o.length,metrics:a})}catch(n){console.error("‚ùå Coverage analysis failed:",n),S("error")}},[u,h,b,M]),ee=async n=>{const t=[];let o;if(h&&h.features)o=f.geoJSON(h).getBounds();else{if(u.length===0)return t;const y=f.latLngBounds(u.map(G=>[G.latitude,G.longitude])),L=.05;o=f.latLngBounds([[y.getSouth()-L,y.getWest()-L],[y.getNorth()+L,y.getEast()+L]]),console.log("üó∫Ô∏è Using station bounds with padding for analysis area")}const a=.01,i=o.getSouth(),A=o.getNorth(),T=o.getWest(),z=o.getEast();console.log("üìã Analyzing coverage with grid:",{bounds:{minLat:i,maxLat:A,minLng:T,maxLng:z},gridSize:a,totalCells:Math.ceil((A-i)/a)*Math.ceil((z-T)/a)});for(let y=i;y<A;y+=a)for(let L=T;L<z;L+=a){const G=f.latLng(y+a/2,L+a/2);let te=!0;if(h&&h.features)try{te=!0}catch{te=!0}if(!te)continue;let K=!1;for(const U of n)if(G.distanceTo(f.latLng(U.center[0],U.center[1]))<=U.radius){K=!0;break}K||t.push({id:`gap_${t.length+1}`,center:[G.lat,G.lng],bounds:{north:y+a,south:y,east:L+a,west:L},type:"uncovered_area",severity:"high",estimatedPopulation:Math.floor(Math.random()*1e3)+100})}return console.log(`üî¥ Identified ${t.length} coverage gaps`),t},re=n=>{const t=[];return n.length===0?(console.log("‚úÖ No coverage gaps found - no station recommendations needed"),t):(be(n).forEach((a,i)=>{const A=je(a);t.push({id:`recommendation_${i+1}`,position:A,type:"new_station",priority:a.length>3?"high":"medium",gapsCovered:a.length,estimatedPopulationServed:a.reduce((T,z)=>T+z.estimatedPopulation,0),reasoning:`Recommended to cover ${a.length} identified gaps in this area`})}),console.log(`üìç Generated ${t.length} station recommendations`),t)},be=n=>{const t=[],o=new Set,a=5e3;return n.forEach((i,A)=>{if(o.has(A))return;const T=[i];o.add(A),n.forEach((z,y)=>{if(o.has(y))return;f.latLng(i.center[0],i.center[1]).distanceTo(f.latLng(z.center[0],z.center[1]))<=a&&(T.push(z),o.add(y))}),T.length>0&&t.push(T)}),t},je=n=>{const t=n.reduce((a,i)=>a+i.center[0],0)/n.length,o=n.reduce((a,i)=>a+i.center[1],0)/n.length;return[t,o]},Se=(n,t)=>{if(!h)return{coverageMetrics:{populationCovered:0,areaCovered:0,nfpaCompliance:0},identifiedGaps:t.length,recommendedStations:0};const a=f.geoJSON(h).getBounds(),i=(a.getNorth()-a.getSouth())*(a.getEast()-a.getWest()),A=t.length*.01*.01,z=Math.max(0,i-A)/i*100,y=t.reduce((K,U)=>K+U.estimatedPopulation,0)+u.length*5e3,L=Math.max(0,y-t.reduce((K,U)=>K+U.estimatedPopulation,0)),G=y>0?L/y*100:100,te=Math.min(z,G);return{coverageMetrics:{populationCovered:Math.round(G*10)/10,areaCovered:Math.round(z*10)/10,nfpaCompliance:Math.round(te*10)/10},identifiedGaps:t.length,recommendedStations:D.length}},Ce=n=>{if(!p.current||!s.gaps)return;const t=p.current;t.eachLayer(o=>{o.options&&o.options.layerType==="gap"&&t.removeLayer(o)}),n.forEach(o=>{f.rectangle([[o.bounds.south,o.bounds.west],[o.bounds.north,o.bounds.east]],{layerType:"gap",color:"#ff4444",fillColor:"#ff4444",fillOpacity:.3,weight:1}).addTo(t).bindPopup(`
        <div>
          <h4>üî¥ Coverage Gap</h4>
          <p><strong>Severity:</strong> ${o.severity}</p>
          <p><strong>Est. Population:</strong> ${o.estimatedPopulation}</p>
          <p><strong>Area:</strong> ~1 km¬≤</p>
        </div>
      `)}),console.log(`üìç Visualized ${n.length} coverage gaps on map`)},we=n=>{if(!p.current)return;const t=p.current;t.eachLayer(o=>{o.options&&o.options.layerType==="recommendation"&&t.removeLayer(o)}),n.forEach(o=>{f.marker(o.position,{layerType:"recommendation",icon:f.divIcon({className:"recommended-station-marker",html:'<div style="background-color: #4CAF50; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">+</div>',iconSize:[30,30],iconAnchor:[15,15]})}).addTo(t).bindPopup(`
        <div>
          <h4>üü¢ Recommended Station</h4>
          <p><strong>Priority:</strong> ${o.priority}</p>
          <p><strong>Gaps Covered:</strong> ${o.gapsCovered}</p>
          <p><strong>Population Served:</strong> ~${o.estimatedPopulationServed}</p>
          <p><strong>Reasoning:</strong> ${o.reasoning}</p>
        </div>
      `)}),console.log(`üü¢ Visualized ${n.length} station recommendations on map`)},ke=()=>c(),Ae=r.useCallback(()=>{I(!j),console.log("üéØ Station placement mode:",j?"OFF":"ON")},[j]);return r.useEffect(()=>(B(),()=>{p.current&&(p.current.remove(),p.current=null)}),[]),r.useEffect(()=>{R()},[u,x]),r.useEffect(()=>{v()},[h,x,s.boundaries]),r.useEffect(()=>{if(u.length>0&&s.isochrones){const n=setTimeout(()=>{C()},1e3);return()=>clearTimeout(n)}},[u,V,s.isochrones]),r.useEffect(()=>{if($&&$>0){const n=setTimeout(()=>{c()},500);return()=>clearTimeout(n)}},[$,c]),e.jsxs(m,{sx:{height:"100%",position:"relative"},children:[e.jsx(m,{ref:q,sx:{height:"100%",width:"100%",borderRadius:1,overflow:"hidden",cursor:j?"crosshair":"default"}}),e.jsxs(ae,{elevation:2,sx:{position:"absolute",top:16,right:16,p:1,display:"flex",flexDirection:"column",gap:1,zIndex:1e3},children:[e.jsx(N,{title:"Add Station",children:e.jsx(O,{color:j?"primary":"default",onClick:Ae,sx:{bgcolor:j?"primary.main":"transparent",color:j?"white":"inherit","&:hover":{bgcolor:j?"primary.dark":"action.hover"}},children:e.jsx(ve,{})})}),e.jsx(N,{title:"Center on Location",children:e.jsx(O,{children:e.jsx(qe,{})})}),e.jsx(N,{title:`Toggle Boundary: ${s.boundaries?"ON":"OFF"}`,children:e.jsx(O,{color:s.boundaries?"primary":"default",onClick:()=>l(n=>({...n,boundaries:!n.boundaries})),sx:{bgcolor:s.boundaries?"primary.main":"transparent",color:s.boundaries?"white":"inherit","&:hover":{bgcolor:s.boundaries?"primary.dark":"action.hover"}},children:e.jsx(Ne,{})})})]}),e.jsxs(m,{sx:{position:"absolute",bottom:16,left:16,zIndex:1e3},children:[e.jsx(H,{label:b.name,size:"small",color:"primary",sx:{mr:1}}),w==="analyzing"&&e.jsx(H,{label:"Analyzing Coverage...",size:"small",color:"warning"}),w==="complete"&&e.jsx(H,{label:"Analysis Complete",size:"small",color:"success"}),w==="error"&&e.jsx(H,{label:"Analysis Error",size:"small",color:"error"})]}),j&&e.jsx(ne,{severity:"info",sx:{position:"absolute",top:16,left:16,right:80,zIndex:1e3},children:"Click on the map to place a new fire station"}),u.length===0&&x&&e.jsxs(m,{sx:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",textAlign:"center",zIndex:1e3,bgcolor:"rgba(255, 255, 255, 0.9)",p:3,borderRadius:2,boxShadow:2},children:[e.jsx(d,{variant:"h6",gutterBottom:!0,children:"No Stations Loaded"}),e.jsx(d,{variant:"body2",color:"text.secondary",children:"Upload station data or use the + button to add stations manually"})]})]})},Qe=({stations:u,coverageStandard:h,jurisdictionBoundary:V,onStationDataImport:J,onCoverageStandardChange:X,onStationAdd:M,onStationEdit:$,onStationDelete:q,onBoundaryUpload:p})=>{const[g,x]=r.useState({station_id:"",station_name:"",latitude:"",longitude:"",station_type:"engine"}),Q=r.useCallback(()=>{if(!g.station_id||!g.station_name||!g.latitude||!g.longitude){alert("Please fill in all required fields");return}const s={...g,latitude:parseFloat(g.latitude),longitude:parseFloat(g.longitude),operational_status:"active"};M(s),x({station_id:"",station_name:"",latitude:"",longitude:"",station_type:"engine"})},[g,M]),j=r.useCallback(s=>{var S;const l=(S=s.target.files)==null?void 0:S[0];if(!l)return;console.log("üó∫Ô∏è Processing uploaded boundary file:",l.name,"Size:",l.size,"bytes");const w=new FileReader;w.onload=Z=>{var P;try{const D=(P=Z.target)==null?void 0:P.result;if(l.name.toLowerCase().endsWith(".geojson")||l.name.toLowerCase().endsWith(".json")){const _=JSON.parse(D);console.log("‚úÖ Successfully parsed GeoJSON boundary file"),p&&p(_)}else{alert("Please upload a GeoJSON (.geojson or .json) file for jurisdiction boundaries");return}s.target.value=""}catch(D){console.error("‚ùå Error parsing boundary file:",D),alert("Error parsing boundary file. Please check the format and try again.")}},w.readAsText(l)},[p]),I=r.useCallback(s=>{var S;const l=(S=s.target.files)==null?void 0:S[0];if(!l)return;console.log("üìÅ Processing uploaded file:",l.name,"Size:",l.size,"bytes");const w=new FileReader;w.onload=Z=>{var P;try{const _=((P=Z.target)==null?void 0:P.result).split(`
`).filter(k=>k.trim());if(_.length<2){alert("CSV file appears to be empty or invalid");return}const Y=k=>{const R=[];let v="",C=!1;for(let F=0;F<k.length;F++){const E=k[F];E==='"'?C=!C:E===","&&!C?(R.push(v.trim()),v=""):v+=E}return R.push(v.trim()),R},b=Y(_[0]);console.log("üìä CSV Headers:",b);const B=[];for(let k=1;k<_.length;k++){const R=Y(_[k]);if(R.length!==b.length){console.warn(`Row ${k} has ${R.length} values but ${b.length} headers. Skipping.`);continue}const v={};b.forEach((C,F)=>{const E=R[F];C==="latitude"||C==="longitude"?v[C]=parseFloat(E):C==="apparatus_count"||C==="staffing_level"?v[C]=parseInt(E)||0:v[C]=E}),v.station_id&&v.station_name&&!isNaN(v.latitude)&&!isNaN(v.longitude)?B.push(v):console.warn(`Row ${k} missing required fields:`,v)}if(console.log("‚úÖ Successfully parsed",B.length,"stations from CSV"),B.length===0){alert("No valid stations found in CSV file. Please check the format.");return}J(B),s.target.value=""}catch(D){console.error("‚ùå Error parsing CSV file:",D),alert("Error parsing CSV file. Please check the format and try again.")}},w.readAsText(l)},[J]);return e.jsxs(m,{sx:{width:"100%",height:"100%",overflow:"auto"},children:[e.jsxs(m,{sx:{p:2,borderBottom:1,borderColor:"divider"},children:[e.jsx(d,{variant:"h6",gutterBottom:!0,children:"Station Coverage Analysis"}),e.jsx(d,{variant:"body2",color:"text.secondary",children:"Configure stations and analysis parameters"})]}),e.jsxs(se,{defaultExpanded:!0,children:[e.jsx(ie,{expandIcon:e.jsx(le,{}),children:e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(de,{color:"primary"}),e.jsx(d,{variant:"subtitle1",children:"Station Data"}),e.jsx(H,{label:`${u.length} stations`,size:"small"})]})}),e.jsxs(ce,{children:[e.jsxs(m,{sx:{mb:2},children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Import Station Data"}),e.jsxs(W,{variant:"outlined",component:"label",startIcon:e.jsx(ue,{}),fullWidth:!0,sx:{mb:2},children:["Upload CSV/Excel",e.jsx("input",{type:"file",hidden:!0,accept:".csv,.xlsx,.xls",onChange:I})]}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"Required fields: Station ID, Name, Latitude, Longitude"})]}),e.jsx(Ie,{sx:{my:2}}),e.jsxs(m,{children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Add Station Manually"}),e.jsx(oe,{fullWidth:!0,label:"Station ID",value:g.station_id,onChange:s=>x(l=>({...l,station_id:s.target.value})),size:"small",sx:{mb:1}}),e.jsx(oe,{fullWidth:!0,label:"Station Name",value:g.station_name,onChange:s=>x(l=>({...l,station_name:s.target.value})),size:"small",sx:{mb:1}}),e.jsxs(m,{sx:{display:"flex",gap:1,mb:1},children:[e.jsx(oe,{label:"Latitude",value:g.latitude,onChange:s=>x(l=>({...l,latitude:s.target.value})),size:"small",type:"number",sx:{flex:1}}),e.jsx(oe,{label:"Longitude",value:g.longitude,onChange:s=>x(l=>({...l,longitude:s.target.value})),size:"small",type:"number",sx:{flex:1}})]}),e.jsxs(oe,{fullWidth:!0,select:!0,label:"Station Type",value:g.station_type,onChange:s=>x(l=>({...l,station_type:s.target.value})),size:"small",sx:{mb:2},SelectProps:{native:!0},children:[e.jsx("option",{value:"engine",children:"Engine Company"}),e.jsx("option",{value:"ladder",children:"Ladder Company"}),e.jsx("option",{value:"rescue",children:"Rescue Company"}),e.jsx("option",{value:"hazmat",children:"Hazmat Unit"}),e.jsx("option",{value:"ems",children:"EMS Station"})]}),e.jsx(W,{fullWidth:!0,variant:"contained",onClick:Q,startIcon:e.jsx(ve,{}),children:"Add Station"})]}),u.length>0&&e.jsxs(m,{sx:{mt:2},children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Current Stations"}),e.jsx(ze,{dense:!0,children:u.map((s,l)=>e.jsxs(Pe,{secondaryAction:e.jsxs(m,{children:[e.jsx(N,{title:"Edit Station",children:e.jsx(O,{size:"small",onClick:()=>$(s),children:e.jsx(Le,{fontSize:"small"})})}),e.jsx(N,{title:"Delete Station",children:e.jsx(O,{size:"small",onClick:()=>q(s.station_id),children:e.jsx($e,{fontSize:"small"})})})]}),children:[e.jsx(_e,{children:e.jsx(de,{fontSize:"small"})}),e.jsx(Re,{primary:s.station_name,secondary:`${s.station_id} ‚Ä¢ ${s.station_type}`})]},s.station_id||l))})]})]})]}),e.jsxs(se,{defaultExpanded:!0,children:[e.jsx(ie,{expandIcon:e.jsx(le,{}),children:e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(Fe,{color:"primary"}),e.jsx(d,{variant:"subtitle1",children:"NFPA Standards"}),e.jsx(H,{label:h.toUpperCase(),size:"small",color:"primary"})]})}),e.jsxs(ce,{children:[e.jsxs(Ee,{component:"fieldset",children:[e.jsx(Me,{component:"legend",children:"Response Time Standard"}),e.jsxs(Ge,{value:h,onChange:s=>X(s.target.value),children:[e.jsx(pe,{value:"nfpa1710",control:e.jsx(fe,{}),label:e.jsxs(m,{children:[e.jsx(d,{variant:"body2",children:"NFPA 1710 - Career Departments"}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"4-minute travel time ‚Ä¢ 90% coverage requirement"})]})}),e.jsx(pe,{value:"nfpa1720",control:e.jsx(fe,{}),label:e.jsxs(m,{children:[e.jsx(d,{variant:"body2",children:"NFPA 1720 - Volunteer Departments"}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"8-minute travel time ‚Ä¢ 80% coverage requirement"})]})})]})]}),e.jsx(ne,{severity:"info",sx:{mt:2},children:e.jsx(d,{variant:"body2",children:"NFPA standards define response time requirements for fire departments. Career departments (1710) have stricter requirements than volunteer departments (1720)."})})]})]}),e.jsxs(se,{children:[e.jsx(ie,{expandIcon:e.jsx(le,{}),children:e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(ye,{color:"primary"}),e.jsx(d,{variant:"subtitle1",children:"Analysis Configuration"})]})}),e.jsxs(ce,{children:[e.jsx(d,{variant:"body2",paragraph:!0,children:"Configure analysis parameters and jurisdiction boundaries."}),e.jsx(W,{variant:"outlined",fullWidth:!0,sx:{mb:1},children:"Draw Jurisdiction Boundary"}),e.jsxs(W,{variant:"outlined",component:"label",fullWidth:!0,sx:{mb:1},startIcon:e.jsx(ue,{}),children:["Upload Boundary File",e.jsx("input",{type:"file",hidden:!0,accept:".geojson,.json",onChange:j})]}),V&&e.jsx(ne,{severity:"success",sx:{mb:1},children:e.jsx(d,{variant:"body2",children:"Jurisdiction boundary loaded successfully"})}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"Define your service area to calculate accurate coverage metrics"})]})]})]})},ht=({mode:u="analysis"})=>{const[h,V]=r.useState(!0),[J,X]=r.useState("coverage"),[M,$]=r.useState(!1),[q,p]=r.useState(!1),[g,x]=r.useState([]),[Q,j]=r.useState(null),[I,s]=r.useState("nfpa1710"),[l,w]=r.useState(null),[S,Z]=r.useState(0),P=400,D=r.useCallback(c=>{console.log("üöí Importing station data:",c.length,"stations"),x(c),w(null)},[]),_=r.useCallback(c=>{console.log("‚ûï Adding new station:",c),x(ee=>[...ee,c])},[]),Y=r.useCallback(c=>{console.log("üéØ Station selected:",c.station_name)},[]),b=r.useCallback(c=>{console.log("üìä Analysis updated:",c),w(c)},[]),B=r.useCallback(c=>{console.log("‚úèÔ∏è Edit station:",c.station_id)},[]),k=r.useCallback(c=>{console.log("üóëÔ∏è Delete station:",c),x(ee=>ee.filter(re=>re.station_id!==c))},[]),R=r.useCallback(c=>{console.log("üìè Coverage standard changed to:",c),s(c),w(null)},[]),v=r.useCallback(c=>{console.log("üó∫Ô∏è Boundary data uploaded:",c),j(c)},[]),C=r.useCallback(()=>{if(console.log("üìä Running coverage analysis with NFPA standard:",I),g.length===0){console.warn("No stations available for analysis");return}w(null),Z(c=>c+1),console.log("‚úÖ Analysis triggered - results will be provided by map component")},[g,I]),F=r.useCallback(()=>{console.log("üìã Opening station coverage report generator"),$(!0)},[]),E=r.useCallback(()=>{V(c=>!c)},[]);return e.jsxs(m,{sx:{display:"flex",height:"100vh",overflow:"hidden"},children:[e.jsx(Oe,{variant:"persistent",anchor:"left",open:h,sx:{width:h?P:0,flexShrink:0,"& .MuiDrawer-paper":{width:P,boxSizing:"border-box"}},children:e.jsx(Qe,{stations:g,coverageStandard:I,jurisdictionBoundary:Q,onStationDataImport:D,onCoverageStandardChange:R,onStationAdd:_,onStationEdit:B,onStationDelete:k,onBoundaryUpload:v})}),e.jsxs(m,{component:"main",sx:{flexGrow:1,display:"flex",flexDirection:"column",overflow:"hidden",transition:"margin 0.3s ease-in-out",marginLeft:h?`${P}px`:"0px"},children:[e.jsx(ae,{elevation:1,sx:{borderRadius:0,borderBottom:1,borderColor:"divider"},children:e.jsxs(De,{sx:{justifyContent:"space-between",px:3},children:[e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:2},children:[e.jsx(de,{color:"primary",sx:{fontSize:28}}),e.jsxs(m,{children:[e.jsx(d,{variant:"h5",component:"h1",sx:{fontWeight:600,color:"primary.main"},children:"Station Coverage Optimizer"}),e.jsx(d,{variant:"body2",color:"text.secondary",children:"Enterprise coverage analysis with NFPA compliance assessment"})]}),I&&e.jsx(H,{label:I.toUpperCase(),size:"small",color:"primary",variant:"outlined"})]}),e.jsxs(m,{sx:{display:"flex",gap:1},children:[e.jsx(N,{title:"Toggle Sidebar",children:e.jsx(O,{onClick:E,children:e.jsx(Be,{})})}),e.jsx(N,{title:"Run Coverage Analysis",children:e.jsx(W,{variant:"contained",color:"primary",startIcon:e.jsx(We,{}),onClick:C,disabled:g.length===0,children:"Analyze Coverage"})}),e.jsx(N,{title:"Generate Professional Report",children:e.jsx(O,{color:"primary",onClick:F,disabled:!l,sx:{bgcolor:"primary.main",color:"white","&:hover":{bgcolor:"primary.dark"},"&:disabled":{bgcolor:"grey.300",color:"grey.500"}},children:e.jsx(Ue,{})})}),e.jsx(N,{title:"Settings",children:e.jsx(O,{onClick:()=>p(!0),children:e.jsx(Ve,{})})}),e.jsx(N,{title:"About Station Coverage Optimizer",children:e.jsx(O,{children:e.jsx(Je,{})})})]})]})}),e.jsx(m,{sx:{flexGrow:1,display:"flex",overflow:"hidden"},children:e.jsx(m,{sx:{flexGrow:1,p:2,overflow:"auto"},children:g.length===0?e.jsxs(ae,{sx:{p:4,textAlign:"center",mt:4},children:[e.jsx(ye,{sx:{fontSize:64,color:"text.secondary",mb:2}}),e.jsx(d,{variant:"h5",gutterBottom:!0,children:"Welcome to Station Coverage Optimizer"}),e.jsx(d,{variant:"body1",color:"text.secondary",paragraph:!0,children:"Upload station data to begin coverage analysis and optimization."}),e.jsxs(ne,{severity:"info",sx:{mt:2,textAlign:"left"},children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Getting Started:"}),e.jsxs(d,{variant:"body2",component:"div",children:["1. Use the sidebar to upload station data (CSV, Excel) or import from Data Formatter",e.jsx("br",{}),"2. Define your jurisdiction boundary (draw or upload)",e.jsx("br",{}),"3. Select NFPA standard (1710 for career, 1720 for volunteer departments)",e.jsx("br",{}),"4. Run coverage analysis to identify gaps and optimization opportunities"]})]})]}):e.jsxs(ae,{sx:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs(m,{sx:{p:2,borderBottom:1,borderColor:"divider"},children:[e.jsx(d,{variant:"h6",gutterBottom:!0,children:"Interactive Coverage Map"}),e.jsxs(d,{variant:"body2",color:"text.secondary",gutterBottom:!0,children:[g.length," stations loaded ‚Ä¢ ",I.toUpperCase()," standards"]}),l&&e.jsxs(ne,{severity:"success",sx:{mt:1},children:["Coverage analysis: ",l.coverageMetrics.nfpaCompliance.toFixed(1),"% NFPA compliance ‚Ä¢",l.identifiedGaps," gaps identified ‚Ä¢",l.recommendedStations," stations recommended"]})]}),e.jsx(m,{sx:{flexGrow:1,minHeight:0},children:e.jsx(He,{stations:g,jurisdictionBoundary:Q,coverageStandard:I,onStationAdd:_,onStationSelect:Y,onAnalysisUpdate:b,analysisTriggered:S})})]})})})]}),e.jsxs(ge,{open:q,onClose:()=>p(!1),maxWidth:"md",fullWidth:!0,children:[e.jsx(me,{children:"Station Coverage Settings"}),e.jsx(he,{children:e.jsx(d,{variant:"body1",children:"Settings panel for NFPA standards, travel speeds, response time thresholds, etc."})}),e.jsx(xe,{children:e.jsx(W,{onClick:()=>p(!1),children:"Close"})})]}),e.jsxs(ge,{open:M,onClose:()=>$(!1),maxWidth:"lg",fullWidth:!0,children:[e.jsx(me,{children:"Generate Coverage Report"}),e.jsx(he,{children:e.jsx(d,{variant:"body1",children:"Professional report generator for station coverage analysis and recommendations."})}),e.jsxs(xe,{children:[e.jsx(W,{onClick:()=>$(!1),children:"Close"}),e.jsx(W,{variant:"contained",children:"Generate PDF"})]})]})]})};export{ht as default};
