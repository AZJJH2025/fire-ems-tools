name: Fire-EMS Tools CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight

jobs:
  visual-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install playwright opencv-python numpy
        playwright install --with-deps chromium
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run visual regression tests
      run: |
        python visual_regression_test.py
    - name: Upload visual regression results
      uses: actions/upload-artifact@v4
      with:
        name: visual-regression-results
        path: visual_regression/reports/
        
  setup-test-data:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Generate test data
      run: |
        python tests/data_generators/generate_test_data.py --standard
    - name: Upload test data
      uses: actions/upload-artifact@v4
      with:
        name: test-data
        path: tests/test_data/
    - name: Upload test fixtures
      uses: actions/upload-artifact@v4
      with:
        name: test-fixtures
        path: tests/fixtures/

  simplified-tests:
    runs-on: ubuntu-latest
    needs: setup-test-data
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
    - name: Download test data
      uses: actions/download-artifact@v4
      with:
        name: test-data
        path: tests/test_data/
    - name: Download test fixtures
      uses: actions/download-artifact@v4
      with:
        name: test-fixtures
        path: tests/fixtures/
    - name: Run simplified tests
      run: |
        python run_all_tests.py --simplified
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: simplified-test-results-${{ matrix.python-version }}
        path: test-results/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Install Playwright
      run: |
        npm init -y
        npm install -D @playwright/test
        npx playwright install --with-deps
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run E2E tests
      run: |
        chmod +x run_e2e_tests.sh
        ./run_e2e_tests.sh
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: e2e/test-results/

  security-tests:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install bandit safety
    - name: Run security checks
      run: |
        bandit -r . -x ./tests,./venv
        safety check
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Install Playwright
      run: |
        npm init -y
        npm install -D @playwright/test
        npx playwright install --with-deps
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run security tests
      run: |
        npx playwright test e2e/tests/security.spec.js
    - name: Upload security test results
      uses: actions/upload-artifact@v4
      with:
        name: security-test-results
        path: e2e/test-results/

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install Playwright and Axe
      run: |
        npm init -y
        npm install -D @playwright/test @axe-core/playwright
        npx playwright install --with-deps
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run accessibility tests
      run: |
        npx playwright test e2e/tests/accessibility.spec.js
    - name: Upload accessibility test results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-test-results
        path: e2e/test-results/

  responsive-tests:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install Playwright
      run: |
        npm init -y
        npm install -D @playwright/test
        npx playwright install --with-deps
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run responsive tests
      run: |
        npx playwright test e2e/tests/responsive.spec.js
    - name: Upload responsive test results
      uses: actions/upload-artifact@v4
      with:
        name: responsive-test-results
        path: e2e/test-results/

  coverage:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov coverage
    - name: Run coverage analysis
      run: |
        python run_coverage.py
    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-results
        path: coverage_reports/

  performance:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install aiohttp matplotlib numpy
    - name: Download test data
      uses: actions/download-artifact@v4
      with:
        name: test-data
        path: tests/test_data/
    - name: Download test fixtures
      uses: actions/download-artifact@v4
      with:
        name: test-fixtures
        path: tests/fixtures/
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run data performance tests
      run: |
        python tests/run_test_suite.py performance --report performance_results/data_performance.json
    - name: Run load test
      run: |
        python performance_test.py --type load --users 20 --duration 30
    - name: Run stress test
      run: |
        python performance_test.py --type stress --max-users 50 --step-users 5 --step-duration 20
    - name: Run endpoint performance test
      run: |
        python performance_test.py --type endpoint --users 5 --requests-per-endpoint 20
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance_results/

  graphql-tests:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install aiohttp matplotlib numpy
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run GraphQL API tests
      run: |
        python graphql_api_test.py test
    - name: Upload GraphQL test reports
      uses: actions/upload-artifact@v4
      with:
        name: graphql-test-reports
        path: graphql_test_reports/
        
  api-tests:
    runs-on: ubuntu-latest
    needs: simplified-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flask-testing
    - name: Install API test dependencies
      run: |
        npm install -g newman
    - name: Download test data
      uses: actions/download-artifact@v4
      with:
        name: test-data
        path: tests/test_data/
    - name: Download test fixtures
      uses: actions/download-artifact@v4
      with:
        name: test-fixtures
        path: tests/fixtures/
    - name: Start Flask server
      run: |
        python app.py &
        sleep 5  # Allow time for server to start
    - name: Run integration API tests
      run: |
        python tests/run_test_suite.py api --report api_test_reports/integration_api_tests.json
    - name: Setup API test environment
      run: |
        python api_testing_framework.py setup
    - name: Run API tests
      run: |
        python api_testing_framework.py postman --create-collection
    - name: Run API load tests
      run: |
        python api_testing_framework.py load --endpoint department --requests 20
        python api_testing_framework.py load --endpoint incidents --requests 20
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      with:
        name: api-test-results
        path: api_test_reports/