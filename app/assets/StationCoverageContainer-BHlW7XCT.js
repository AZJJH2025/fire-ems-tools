import{j as e,r as a,B as m}from"./index-B4rCsr1S.js";import{L as v}from"./leaflet-CFdvkgKM.js";import{c as Le,P as ae,T as d}from"./Typography-CosZCdYD.js";import{T as N,A as fe,U as de,E as Ie}from"./Edit-Dy53UTJJ.js";import{f as D,C as q,A as ne,D as ze,T as oe,L as Pe,h as _e,i as Re,j as Ee,F as Me,N as Ne,d as ue,x as De,a as pe,b as ge,c as me,e as he}from"./TextField-CMwmd8Ye.js";import{L as $e,S as ce}from"./Place-C1GNSQhK.js";import{A as re,a as se,E as ie,b as le}from"./ExpandMore-DmLKio1t.js";import{B}from"./Button-CpRUx7h0.js";import{D as Fe}from"./Delete-BWKH_ftl.js";import{T as Ge}from"./Timeline-83rxspKb.js";import{R as Oe,a as xe}from"./RadioGroup-Bpdv-4ku.js";import{M as ve}from"./Map-DQciv2BA.js";import{D as Be,M as Ue,E as We}from"./Menu-BLdY67T0.js";import{A as Ve}from"./Assessment-DPipDgVn.js";import{S as Je}from"./Settings-BCLHO5ab.js";import{I as qe}from"./Info-CY_abMkK.js";import"./Popper-BYxNBsY5.js";import"./FormGroup-Bc4Jxlrw.js";const He=Le(e.jsx("path",{d:"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4m8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7"})),Qe=({stations:u,jurisdictionBoundary:h,coverageStandard:U,onStationAdd:W,onStationSelect:K,onAnalysisUpdate:P,triggerAnalysis:$})=>{const V=a.useRef(null),p=a.useRef(null),g=a.useRef(!1),[x,H]=a.useState(!1),[j,L]=a.useState(!1),[s,l]=a.useState({stations:!0,isochrones:!0,gaps:!0,boundaries:!0}),[k,y]=a.useState("idle"),[Q,_]=a.useState([]),[R,E]=a.useState([]),b={nfpa1710:{name:"NFPA 1710 (Career Departments)",travelTime:240,responseTimeGoal:480,coverageGoal:90,travelSpeed:35},nfpa1720:{name:"NFPA 1720 (Volunteer Departments)",travelTime:480,responseTimeGoal:600,coverageGoal:80,travelSpeed:35}}[U],F=a.useCallback(()=>{if(!(!V.current||p.current))try{v.Icon.Default.mergeOptions({iconRetinaUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png",iconUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png",shadowUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png"});const o=v.map(V.current).setView([39.8283,-98.5795],4);v.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"¬© OpenStreetMap contributors",maxZoom:19}).addTo(o),console.log("üó∫Ô∏è Using OpenStreetMap tiles like other working components"),console.log("üó∫Ô∏è Leaflet marker icons configured with CDN URLs"),p.current=o,H(!0),console.log("üó∫Ô∏è Coverage map initialized successfully"),o.on("click",C)}catch(o){console.error("‚ùå Failed to initialize coverage map:",o),y("error")}},[]),C=a.useCallback(o=>{if(!j||!W)return;const{lat:t,lng:n}=o.latlng,r={station_id:`STATION_${Date.now()}`,station_name:"New Station",latitude:t,longitude:n,station_type:"engine",operational_status:"active"};W(r),L(!1),console.log("üöí New station placed at:",t,n)},[j,W]),I=a.useCallback(()=>{if(!(!p.current||!x))try{const o=p.current;if(o.eachLayer(t=>{t.options&&t.options.stationType==="station"&&o.removeLayer(t)}),u.forEach(t=>{const n=v.marker([t.latitude,t.longitude],{stationType:"station"}).addTo(o),r=`
          <div>
            <h4>${t.station_name}</h4>
            <p><strong>ID:</strong> ${t.station_id}</p>
            <p><strong>Type:</strong> ${t.station_type||"Unknown"}</p>
            <p><strong>Apparatus:</strong> ${t.apparatus_count||"N/A"}</p>
            <p><strong>Status:</strong> ${t.operational_status||"Unknown"}</p>
          </div>
        `;n.bindPopup(r),n.on("click",()=>{K&&K(t)})}),u.length>0){const t=v.latLngBounds(u.map(n=>[n.latitude,n.longitude]));o.fitBounds(t,{padding:[50,50]})}console.log("üìç Updated",u.length,"station markers")}catch(o){console.error("‚ùå Failed to update station markers:",o)}},[u,x]),f=a.useCallback(()=>{var o;if(!(!p.current||!x))try{const t=p.current;if(t.eachLayer(n=>{n.options&&n.options.layerType==="boundary"&&t.removeLayer(n)}),h&&s.boundaries){console.log("üó∫Ô∏è Adding jurisdiction boundary to map");const n=v.geoJSON(h,{layerType:"boundary",style:{color:"#ff6b35",weight:3,opacity:.8,fillColor:"#ff6b35",fillOpacity:.1,dashArray:"5, 5"}}).addTo(t);if(h.features&&((o=h.features[0])!=null&&o.properties)){const r=h.features[0].properties,i=`
            <div>
              <h4>${r.name||"Jurisdiction Boundary"}</h4>
              ${r.population?`<p><strong>Population:</strong> ${r.population.toLocaleString()}</p>`:""}
              ${r.area_sq_miles?`<p><strong>Area:</strong> ${r.area_sq_miles} sq miles</p>`:""}
              ${r.county?`<p><strong>County:</strong> ${r.county}</p>`:""}
              ${r.state?`<p><strong>State:</strong> ${r.state}</p>`:""}
            </div>
          `;n.bindPopup(i)}u.length===0&&t.fitBounds(n.getBounds(),{padding:[20,20]}),console.log("‚úÖ Jurisdiction boundary added to map")}}catch(t){console.error("‚ùå Failed to update jurisdiction boundary:",t)}},[h,x,s.boundaries,u.length]),S=a.useCallback(async()=>{if(!(!p.current||!x||u.length===0)){if(g.current){console.log("üîÑ Isochrone generation already in progress, skipping...");return}g.current=!0,y("analyzing");try{const o=p.current;o.eachLayer(i=>{i.options&&i.options.layerType==="isochrone"&&o.removeLayer(i)});const t=u.map(async i=>c(i));(await Promise.all(t)).forEach((i,w)=>{i&&A(i,u[w])}),y("complete");const r=Ae();P&&P(r),console.log("‚úÖ Generated isochrones for",u.length,"stations")}catch(o){console.error("‚ùå Failed to generate isochrones:",o),y("error")}finally{g.current=!1}}},[u,x,b]),c=async o=>{const t=b.travelTime/60,n=b.travelSpeed*1609.34*t/60;return{center:[o.latitude,o.longitude],radius:n,travelTime:b.travelTime,stationId:o.station_id}},A=(o,t)=>{if(p.current)try{const n=p.current;v.circle(o.center,{radius:o.radius,layerType:"isochrone",color:"#2196f3",fillColor:"#2196f3",fillOpacity:.1,weight:2}).addTo(n).bindPopup(`
        <div>
          <h4>${t.station_name} Coverage</h4>
          <p><strong>Travel Time:</strong> ${o.travelTime/60} minutes</p>
          <p><strong>Standard:</strong> ${b.name}</p>
        </div>
      `)}catch(n){console.error("‚ùå Failed to add isochrone to map:",n)}},Y=a.useCallback(async()=>{if(!p.current||!h||u.length===0){console.warn("Cannot perform analysis: missing map, boundary, or stations");return}y("analyzing"),console.log("üîç Starting comprehensive coverage gap analysis...");try{const o=u.map(i=>{const w=b.travelTime/60,T=b.travelSpeed*1609.34*w/60;return{station:i,center:[i.latitude,i.longitude],radius:T,coverageCircle:v.circle([i.latitude,i.longitude],{radius:T})}}),t=await ye(o);_(t);const n=be(t);E(n);const r=Ce(o,t);we(t),ke(n),y("complete"),P&&P({...r,gaps:t,recommendations:n,totalStations:u.length,coverageStandard:U,analysisDate:new Date().toISOString()}),console.log("‚úÖ Coverage analysis complete:",{gaps:t.length,recommendations:n.length,metrics:r})}catch(o){console.error("‚ùå Coverage analysis failed:",o),y("error")}},[u,h,b,P]),ye=async o=>{const t=[];if(!h||!h.features)return console.warn("No jurisdiction boundary available for gap analysis"),t;const r=v.geoJSON(h).getBounds(),i=.01,w=r.getSouth(),T=r.getNorth(),z=r.getWest(),M=r.getEast();console.log("üìã Analyzing coverage with grid:",{bounds:{minLat:w,maxLat:T,minLng:z,maxLng:M},gridSize:i,totalCells:Math.ceil((T-w)/i)*Math.ceil((M-z)/i)});for(let G=w;G<T;G+=i)for(let O=z;O<M;O+=i){const ee=v.latLng(G+i/2,O+i/2);let J=!1;try{const te=v.geoJSON(h);J=!0}catch{J=!0}if(!J)continue;let Z=!1;for(const te of o)if(ee.distanceTo(v.latLng(te.center[0],te.center[1]))<=te.radius){Z=!0;break}Z||t.push({id:`gap_${t.length+1}`,center:[ee.lat,ee.lng],bounds:{north:G+i,south:G,east:O+i,west:O},type:"uncovered_area",severity:"high",estimatedPopulation:Math.floor(Math.random()*1e3)+100})}return console.log(`üî¥ Identified ${t.length} coverage gaps`),t},be=o=>{const t=[];return o.length===0?(console.log("‚úÖ No coverage gaps found - no station recommendations needed"),t):(je(o).forEach((r,i)=>{const w=Se(r);t.push({id:`recommendation_${i+1}`,position:w,type:"new_station",priority:r.length>3?"high":"medium",gapsCovered:r.length,estimatedPopulationServed:r.reduce((T,z)=>T+z.estimatedPopulation,0),reasoning:`Recommended to cover ${r.length} identified gaps in this area`})}),console.log(`üìç Generated ${t.length} station recommendations`),t)},je=o=>{const t=[],n=new Set,r=5e3;return o.forEach((i,w)=>{if(n.has(w))return;const T=[i];n.add(w),o.forEach((z,M)=>{if(n.has(M))return;v.latLng(i.center[0],i.center[1]).distanceTo(v.latLng(z.center[0],z.center[1]))<=r&&(T.push(z),n.add(M))}),T.length>0&&t.push(T)}),t},Se=o=>{const t=o.reduce((r,i)=>r+i.center[0],0)/o.length,n=o.reduce((r,i)=>r+i.center[1],0)/o.length;return[t,n]},Ce=(o,t)=>{if(!h)return{coverageMetrics:{populationCovered:0,areaCovered:0,nfpaCompliance:0},identifiedGaps:t.length,recommendedStations:0};const r=v.geoJSON(h).getBounds(),i=(r.getNorth()-r.getSouth())*(r.getEast()-r.getWest()),w=t.length*.01*.01,z=Math.max(0,i-w)/i*100,M=t.reduce((J,Z)=>J+Z.estimatedPopulation,0)+u.length*5e3,G=Math.max(0,M-t.reduce((J,Z)=>J+Z.estimatedPopulation,0)),O=M>0?G/M*100:100,ee=Math.min(z,O);return{coverageMetrics:{populationCovered:Math.round(O*10)/10,areaCovered:Math.round(z*10)/10,nfpaCompliance:Math.round(ee*10)/10},identifiedGaps:t.length,recommendedStations:R.length}},we=o=>{if(!p.current||!s.gaps)return;const t=p.current;t.eachLayer(n=>{n.options&&n.options.layerType==="gap"&&t.removeLayer(n)}),o.forEach(n=>{v.rectangle([[n.bounds.south,n.bounds.west],[n.bounds.north,n.bounds.east]],{layerType:"gap",color:"#ff4444",fillColor:"#ff4444",fillOpacity:.3,weight:1}).addTo(t).bindPopup(`
        <div>
          <h4>üî¥ Coverage Gap</h4>
          <p><strong>Severity:</strong> ${n.severity}</p>
          <p><strong>Est. Population:</strong> ${n.estimatedPopulation}</p>
          <p><strong>Area:</strong> ~1 km¬≤</p>
        </div>
      `)}),console.log(`üìç Visualized ${o.length} coverage gaps on map`)},ke=o=>{if(!p.current)return;const t=p.current;t.eachLayer(n=>{n.options&&n.options.layerType==="recommendation"&&t.removeLayer(n)}),o.forEach(n=>{v.marker(n.position,{layerType:"recommendation",icon:v.divIcon({className:"recommended-station-marker",html:'<div style="background-color: #4CAF50; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">+</div>',iconSize:[30,30],iconAnchor:[15,15]})}).addTo(t).bindPopup(`
        <div>
          <h4>üü¢ Recommended Station</h4>
          <p><strong>Priority:</strong> ${n.priority}</p>
          <p><strong>Gaps Covered:</strong> ${n.gapsCovered}</p>
          <p><strong>Population Served:</strong> ~${n.estimatedPopulationServed}</p>
          <p><strong>Reasoning:</strong> ${n.reasoning}</p>
        </div>
      `)}),console.log(`üü¢ Visualized ${o.length} station recommendations on map`)},Ae=()=>Y(),Te=a.useCallback(()=>{L(!j),console.log("üéØ Station placement mode:",j?"OFF":"ON")},[j]);return a.useEffect(()=>(F(),()=>{p.current&&(p.current.remove(),p.current=null)}),[]),a.useEffect(()=>{I()},[u,x]),a.useEffect(()=>{f()},[h,x,s.boundaries]),a.useEffect(()=>{if(u.length>0&&s.isochrones){const o=setTimeout(()=>{S()},1e3);return()=>clearTimeout(o)}},[u,U,s.isochrones]),a.useEffect(()=>{if($){const o=setTimeout(()=>{Y()},500);return()=>clearTimeout(o)}},[$,Y]),e.jsxs(m,{sx:{height:"100%",position:"relative"},children:[e.jsx(m,{ref:V,sx:{height:"100%",width:"100%",borderRadius:1,overflow:"hidden",cursor:j?"crosshair":"default"}}),e.jsxs(ae,{elevation:2,sx:{position:"absolute",top:16,right:16,p:1,display:"flex",flexDirection:"column",gap:1,zIndex:1e3},children:[e.jsx(N,{title:"Add Station",children:e.jsx(D,{color:j?"primary":"default",onClick:Te,sx:{bgcolor:j?"primary.main":"transparent",color:j?"white":"inherit","&:hover":{bgcolor:j?"primary.dark":"action.hover"}},children:e.jsx(fe,{})})}),e.jsx(N,{title:"Center on Location",children:e.jsx(D,{children:e.jsx(He,{})})}),e.jsx(N,{title:`Toggle Boundary: ${s.boundaries?"ON":"OFF"}`,children:e.jsx(D,{color:s.boundaries?"primary":"default",onClick:()=>l(o=>({...o,boundaries:!o.boundaries})),sx:{bgcolor:s.boundaries?"primary.main":"transparent",color:s.boundaries?"white":"inherit","&:hover":{bgcolor:s.boundaries?"primary.dark":"action.hover"}},children:e.jsx($e,{})})})]}),e.jsxs(m,{sx:{position:"absolute",bottom:16,left:16,zIndex:1e3},children:[e.jsx(q,{label:b.name,size:"small",color:"primary",sx:{mr:1}}),k==="analyzing"&&e.jsx(q,{label:"Analyzing Coverage...",size:"small",color:"warning"}),k==="complete"&&e.jsx(q,{label:"Analysis Complete",size:"small",color:"success"}),k==="error"&&e.jsx(q,{label:"Analysis Error",size:"small",color:"error"})]}),j&&e.jsx(ne,{severity:"info",sx:{position:"absolute",top:16,left:16,right:80,zIndex:1e3},children:"Click on the map to place a new fire station"}),u.length===0&&x&&e.jsxs(m,{sx:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",textAlign:"center",zIndex:1e3,bgcolor:"rgba(255, 255, 255, 0.9)",p:3,borderRadius:2,boxShadow:2},children:[e.jsx(d,{variant:"h6",gutterBottom:!0,children:"No Stations Loaded"}),e.jsx(d,{variant:"body2",color:"text.secondary",children:"Upload station data or use the + button to add stations manually"})]})]})},Ze=({stations:u,coverageStandard:h,jurisdictionBoundary:U,onStationDataImport:W,onCoverageStandardChange:K,onStationAdd:P,onStationEdit:$,onStationDelete:V,onBoundaryUpload:p})=>{const[g,x]=a.useState({station_id:"",station_name:"",latitude:"",longitude:"",station_type:"engine"}),H=a.useCallback(()=>{if(!g.station_id||!g.station_name||!g.latitude||!g.longitude){alert("Please fill in all required fields");return}const s={...g,latitude:parseFloat(g.latitude),longitude:parseFloat(g.longitude),operational_status:"active"};P(s),x({station_id:"",station_name:"",latitude:"",longitude:"",station_type:"engine"})},[g,P]),j=a.useCallback(s=>{var y;const l=(y=s.target.files)==null?void 0:y[0];if(!l)return;console.log("üó∫Ô∏è Processing uploaded boundary file:",l.name,"Size:",l.size,"bytes");const k=new FileReader;k.onload=Q=>{var _;try{const R=(_=Q.target)==null?void 0:_.result;if(l.name.toLowerCase().endsWith(".geojson")||l.name.toLowerCase().endsWith(".json")){const E=JSON.parse(R);console.log("‚úÖ Successfully parsed GeoJSON boundary file"),p&&p(E)}else{alert("Please upload a GeoJSON (.geojson or .json) file for jurisdiction boundaries");return}s.target.value=""}catch(R){console.error("‚ùå Error parsing boundary file:",R),alert("Error parsing boundary file. Please check the format and try again.")}},k.readAsText(l)},[p]),L=a.useCallback(s=>{var y;const l=(y=s.target.files)==null?void 0:y[0];if(!l)return;console.log("üìÅ Processing uploaded file:",l.name,"Size:",l.size,"bytes");const k=new FileReader;k.onload=Q=>{var _;try{const E=((_=Q.target)==null?void 0:_.result).split(`
`).filter(C=>C.trim());if(E.length<2){alert("CSV file appears to be empty or invalid");return}const X=C=>{const I=[];let f="",S=!1;for(let c=0;c<C.length;c++){const A=C[c];A==='"'?S=!S:A===","&&!S?(I.push(f.trim()),f=""):f+=A}return I.push(f.trim()),I},b=X(E[0]);console.log("üìä CSV Headers:",b);const F=[];for(let C=1;C<E.length;C++){const I=X(E[C]);if(I.length!==b.length){console.warn(`Row ${C} has ${I.length} values but ${b.length} headers. Skipping.`);continue}const f={};b.forEach((S,c)=>{const A=I[c];S==="latitude"||S==="longitude"?f[S]=parseFloat(A):S==="apparatus_count"||S==="staffing_level"?f[S]=parseInt(A)||0:f[S]=A}),f.station_id&&f.station_name&&!isNaN(f.latitude)&&!isNaN(f.longitude)?F.push(f):console.warn(`Row ${C} missing required fields:`,f)}if(console.log("‚úÖ Successfully parsed",F.length,"stations from CSV"),F.length===0){alert("No valid stations found in CSV file. Please check the format.");return}W(F),s.target.value=""}catch(R){console.error("‚ùå Error parsing CSV file:",R),alert("Error parsing CSV file. Please check the format and try again.")}},k.readAsText(l)},[W]);return e.jsxs(m,{sx:{width:"100%",height:"100%",overflow:"auto"},children:[e.jsxs(m,{sx:{p:2,borderBottom:1,borderColor:"divider"},children:[e.jsx(d,{variant:"h6",gutterBottom:!0,children:"Station Coverage Analysis"}),e.jsx(d,{variant:"body2",color:"text.secondary",children:"Configure stations and analysis parameters"})]}),e.jsxs(re,{defaultExpanded:!0,children:[e.jsx(se,{expandIcon:e.jsx(ie,{}),children:e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(ce,{color:"primary"}),e.jsx(d,{variant:"subtitle1",children:"Station Data"}),e.jsx(q,{label:`${u.length} stations`,size:"small"})]})}),e.jsxs(le,{children:[e.jsxs(m,{sx:{mb:2},children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Import Station Data"}),e.jsxs(B,{variant:"outlined",component:"label",startIcon:e.jsx(de,{}),fullWidth:!0,sx:{mb:2},children:["Upload CSV/Excel",e.jsx("input",{type:"file",hidden:!0,accept:".csv,.xlsx,.xls",onChange:L})]}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"Required fields: Station ID, Name, Latitude, Longitude"})]}),e.jsx(ze,{sx:{my:2}}),e.jsxs(m,{children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Add Station Manually"}),e.jsx(oe,{fullWidth:!0,label:"Station ID",value:g.station_id,onChange:s=>x(l=>({...l,station_id:s.target.value})),size:"small",sx:{mb:1}}),e.jsx(oe,{fullWidth:!0,label:"Station Name",value:g.station_name,onChange:s=>x(l=>({...l,station_name:s.target.value})),size:"small",sx:{mb:1}}),e.jsxs(m,{sx:{display:"flex",gap:1,mb:1},children:[e.jsx(oe,{label:"Latitude",value:g.latitude,onChange:s=>x(l=>({...l,latitude:s.target.value})),size:"small",type:"number",sx:{flex:1}}),e.jsx(oe,{label:"Longitude",value:g.longitude,onChange:s=>x(l=>({...l,longitude:s.target.value})),size:"small",type:"number",sx:{flex:1}})]}),e.jsxs(oe,{fullWidth:!0,select:!0,label:"Station Type",value:g.station_type,onChange:s=>x(l=>({...l,station_type:s.target.value})),size:"small",sx:{mb:2},SelectProps:{native:!0},children:[e.jsx("option",{value:"engine",children:"Engine Company"}),e.jsx("option",{value:"ladder",children:"Ladder Company"}),e.jsx("option",{value:"rescue",children:"Rescue Company"}),e.jsx("option",{value:"hazmat",children:"Hazmat Unit"}),e.jsx("option",{value:"ems",children:"EMS Station"})]}),e.jsx(B,{fullWidth:!0,variant:"contained",onClick:H,startIcon:e.jsx(fe,{}),children:"Add Station"})]}),u.length>0&&e.jsxs(m,{sx:{mt:2},children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Current Stations"}),e.jsx(Pe,{dense:!0,children:u.map((s,l)=>e.jsxs(_e,{secondaryAction:e.jsxs(m,{children:[e.jsx(N,{title:"Edit Station",children:e.jsx(D,{size:"small",onClick:()=>$(s),children:e.jsx(Ie,{fontSize:"small"})})}),e.jsx(N,{title:"Delete Station",children:e.jsx(D,{size:"small",onClick:()=>V(s.station_id),children:e.jsx(Fe,{fontSize:"small"})})})]}),children:[e.jsx(Re,{children:e.jsx(ce,{fontSize:"small"})}),e.jsx(Ee,{primary:s.station_name,secondary:`${s.station_id} ‚Ä¢ ${s.station_type}`})]},s.station_id||l))})]})]})]}),e.jsxs(re,{defaultExpanded:!0,children:[e.jsx(se,{expandIcon:e.jsx(ie,{}),children:e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(Ge,{color:"primary"}),e.jsx(d,{variant:"subtitle1",children:"NFPA Standards"}),e.jsx(q,{label:h.toUpperCase(),size:"small",color:"primary"})]})}),e.jsxs(le,{children:[e.jsxs(Me,{component:"fieldset",children:[e.jsx(Ne,{component:"legend",children:"Response Time Standard"}),e.jsxs(Oe,{value:h,onChange:s=>K(s.target.value),children:[e.jsx(ue,{value:"nfpa1710",control:e.jsx(xe,{}),label:e.jsxs(m,{children:[e.jsx(d,{variant:"body2",children:"NFPA 1710 - Career Departments"}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"4-minute travel time ‚Ä¢ 90% coverage requirement"})]})}),e.jsx(ue,{value:"nfpa1720",control:e.jsx(xe,{}),label:e.jsxs(m,{children:[e.jsx(d,{variant:"body2",children:"NFPA 1720 - Volunteer Departments"}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"8-minute travel time ‚Ä¢ 80% coverage requirement"})]})})]})]}),e.jsx(ne,{severity:"info",sx:{mt:2},children:e.jsx(d,{variant:"body2",children:"NFPA standards define response time requirements for fire departments. Career departments (1710) have stricter requirements than volunteer departments (1720)."})})]})]}),e.jsxs(re,{children:[e.jsx(se,{expandIcon:e.jsx(ie,{}),children:e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(ve,{color:"primary"}),e.jsx(d,{variant:"subtitle1",children:"Analysis Configuration"})]})}),e.jsxs(le,{children:[e.jsx(d,{variant:"body2",paragraph:!0,children:"Configure analysis parameters and jurisdiction boundaries."}),e.jsx(B,{variant:"outlined",fullWidth:!0,sx:{mb:1},children:"Draw Jurisdiction Boundary"}),e.jsxs(B,{variant:"outlined",component:"label",fullWidth:!0,sx:{mb:1},startIcon:e.jsx(de,{}),children:["Upload Boundary File",e.jsx("input",{type:"file",hidden:!0,accept:".geojson,.json",onChange:j})]}),U&&e.jsx(ne,{severity:"success",sx:{mb:1},children:e.jsx(d,{variant:"body2",children:"Jurisdiction boundary loaded successfully"})}),e.jsx(d,{variant:"caption",color:"text.secondary",children:"Define your service area to calculate accurate coverage metrics"})]})]})]})},xt=({mode:u="analysis"})=>{const[h,U]=a.useState(!0),[W,K]=a.useState("coverage"),[P,$]=a.useState(!1),[V,p]=a.useState(!1),[g,x]=a.useState([]),[H,j]=a.useState(null),[L,s]=a.useState("nfpa1710"),[l,k]=a.useState(null),y=400,Q=a.useCallback(c=>{console.log("üöí Importing station data:",c.length,"stations"),x(c),k(null)},[]),_=a.useCallback(c=>{console.log("‚ûï Adding new station:",c),x(A=>[...A,c])},[]),R=a.useCallback(c=>{console.log("üéØ Station selected:",c.station_name)},[]),E=a.useCallback(c=>{console.log("üìä Analysis updated:",c),k(c)},[]),X=a.useCallback(c=>{console.log("‚úèÔ∏è Edit station:",c.station_id)},[]),b=a.useCallback(c=>{console.log("üóëÔ∏è Delete station:",c),x(A=>A.filter(Y=>Y.station_id!==c))},[]),F=a.useCallback(c=>{console.log("üìè Coverage standard changed to:",c),s(c),k(null)},[]),C=a.useCallback(c=>{console.log("üó∫Ô∏è Boundary data uploaded:",c),j(c)},[]),I=a.useCallback(()=>{if(console.log("üìä Running coverage analysis with NFPA standard:",L),g.length===0){console.warn("No stations available for analysis");return}console.log("‚úÖ Analysis triggered - results will be provided by map component")},[g,L]),f=a.useCallback(()=>{console.log("üìã Opening station coverage report generator"),$(!0)},[]),S=a.useCallback(()=>{U(c=>!c)},[]);return e.jsxs(m,{sx:{display:"flex",height:"100vh",overflow:"hidden"},children:[e.jsx(Be,{variant:"persistent",anchor:"left",open:h,sx:{width:h?y:0,flexShrink:0,"& .MuiDrawer-paper":{width:y,boxSizing:"border-box"}},children:e.jsx(Ze,{stations:g,coverageStandard:L,jurisdictionBoundary:H,onStationDataImport:Q,onCoverageStandardChange:F,onStationAdd:_,onStationEdit:X,onStationDelete:b,onBoundaryUpload:C})}),e.jsxs(m,{component:"main",sx:{flexGrow:1,display:"flex",flexDirection:"column",overflow:"hidden",transition:"margin 0.3s ease-in-out",marginLeft:h?`${y}px`:"0px"},children:[e.jsx(ae,{elevation:1,sx:{borderRadius:0,borderBottom:1,borderColor:"divider"},children:e.jsxs(De,{sx:{justifyContent:"space-between",px:3},children:[e.jsxs(m,{sx:{display:"flex",alignItems:"center",gap:2},children:[e.jsx(ce,{color:"primary",sx:{fontSize:28}}),e.jsxs(m,{children:[e.jsx(d,{variant:"h5",component:"h1",sx:{fontWeight:600,color:"primary.main"},children:"Station Coverage Optimizer"}),e.jsx(d,{variant:"body2",color:"text.secondary",children:"Enterprise coverage analysis with NFPA compliance assessment"})]}),L&&e.jsx(q,{label:L.toUpperCase(),size:"small",color:"primary",variant:"outlined"})]}),e.jsxs(m,{sx:{display:"flex",gap:1},children:[e.jsx(N,{title:"Toggle Sidebar",children:e.jsx(D,{onClick:S,children:e.jsx(Ue,{})})}),e.jsx(N,{title:"Run Coverage Analysis",children:e.jsx(B,{variant:"contained",color:"primary",startIcon:e.jsx(Ve,{}),onClick:I,disabled:g.length===0,children:"Analyze Coverage"})}),e.jsx(N,{title:"Generate Professional Report",children:e.jsx(D,{color:"primary",onClick:f,disabled:!l,sx:{bgcolor:"primary.main",color:"white","&:hover":{bgcolor:"primary.dark"},"&:disabled":{bgcolor:"grey.300",color:"grey.500"}},children:e.jsx(We,{})})}),e.jsx(N,{title:"Settings",children:e.jsx(D,{onClick:()=>p(!0),children:e.jsx(Je,{})})}),e.jsx(N,{title:"About Station Coverage Optimizer",children:e.jsx(D,{children:e.jsx(qe,{})})})]})]})}),e.jsx(m,{sx:{flexGrow:1,display:"flex",overflow:"hidden"},children:e.jsx(m,{sx:{flexGrow:1,p:2,overflow:"auto"},children:g.length===0?e.jsxs(ae,{sx:{p:4,textAlign:"center",mt:4},children:[e.jsx(ve,{sx:{fontSize:64,color:"text.secondary",mb:2}}),e.jsx(d,{variant:"h5",gutterBottom:!0,children:"Welcome to Station Coverage Optimizer"}),e.jsx(d,{variant:"body1",color:"text.secondary",paragraph:!0,children:"Upload station data to begin coverage analysis and optimization."}),e.jsxs(ne,{severity:"info",sx:{mt:2,textAlign:"left"},children:[e.jsx(d,{variant:"subtitle2",gutterBottom:!0,children:"Getting Started:"}),e.jsxs(d,{variant:"body2",component:"div",children:["1. Use the sidebar to upload station data (CSV, Excel) or import from Data Formatter",e.jsx("br",{}),"2. Define your jurisdiction boundary (draw or upload)",e.jsx("br",{}),"3. Select NFPA standard (1710 for career, 1720 for volunteer departments)",e.jsx("br",{}),"4. Run coverage analysis to identify gaps and optimization opportunities"]})]})]}):e.jsxs(ae,{sx:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs(m,{sx:{p:2,borderBottom:1,borderColor:"divider"},children:[e.jsx(d,{variant:"h6",gutterBottom:!0,children:"Interactive Coverage Map"}),e.jsxs(d,{variant:"body2",color:"text.secondary",gutterBottom:!0,children:[g.length," stations loaded ‚Ä¢ ",L.toUpperCase()," standards"]}),l&&e.jsxs(ne,{severity:"success",sx:{mt:1},children:["Coverage analysis: ",l.coverageMetrics.nfpaCompliance.toFixed(1),"% NFPA compliance ‚Ä¢",l.identifiedGaps," gaps identified ‚Ä¢",l.recommendedStations," stations recommended"]})]}),e.jsx(m,{sx:{flexGrow:1,minHeight:0},children:e.jsx(Qe,{stations:g,jurisdictionBoundary:H,coverageStandard:L,onStationAdd:_,onStationSelect:R,onAnalysisUpdate:E,triggerAnalysis:I})})]})})})]}),e.jsxs(pe,{open:V,onClose:()=>p(!1),maxWidth:"md",fullWidth:!0,children:[e.jsx(ge,{children:"Station Coverage Settings"}),e.jsx(me,{children:e.jsx(d,{variant:"body1",children:"Settings panel for NFPA standards, travel speeds, response time thresholds, etc."})}),e.jsx(he,{children:e.jsx(B,{onClick:()=>p(!1),children:"Close"})})]}),e.jsxs(pe,{open:P,onClose:()=>$(!1),maxWidth:"lg",fullWidth:!0,children:[e.jsx(ge,{children:"Generate Coverage Report"}),e.jsx(me,{children:e.jsx(d,{variant:"body1",children:"Professional report generator for station coverage analysis and recommendations."})}),e.jsxs(he,{children:[e.jsx(B,{onClick:()=>$(!1),children:"Close"}),e.jsx(B,{variant:"contained",children:"Generate PDF"})]})]})]})};export{xt as default};
