import{j as $}from"./index-cu1fB2zU.js";import{c as C}from"./Typography-DkXrlhVb.js";const b=C($.jsx("path",{d:"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"})),O=C($.jsx("path",{d:"M2.5 4v3h5v12h3V7h5V4zm19 5h-9v3h3v7h3v-7h3z"})),E={fire:{category:"fire",color:"#dc2626",icon:"fire"},"structure fire":{category:"fire",color:"#dc2626",icon:"fire"},"vehicle fire":{category:"fire",color:"#ff6600",icon:"fire"},wildfire:{category:"fire",color:"#ff4444",icon:"fire"},medical:{category:"medical",color:"#22c55e",icon:"medical"},ems:{category:"medical",color:"#22c55e",icon:"medical"},cardiac:{category:"medical",color:"#ef4444",icon:"medical"},respiratory:{category:"medical",color:"#3b82f6",icon:"medical"},rescue:{category:"rescue",color:"#f59e0b",icon:"rescue"},"vehicle accident":{category:"rescue",color:"#f59e0b",icon:"rescue"},hazmat:{category:"hazmat",color:"#8b5cf6",icon:"hazmat"},alarm:{category:"alarm",color:"#6b7280",icon:"alarm"},"false alarm":{category:"alarm",color:"#9ca3af",icon:"alarm"}},D=(A,o)=>{const i={fire:`data:image/svg+xml,%3Csvg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"%3E%3Ccircle cx="12" cy="12" r="10" fill="${encodeURIComponent(o)}"/%3E%3Ctext x="50%25" y="50%25" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="8px" fill="white" font-weight="bold"%3EF%3C/text%3E%3C/svg%3E`,medical:`data:image/svg+xml,%3Csvg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"%3E%3Ccircle cx="12" cy="12" r="10" fill="${encodeURIComponent(o)}"/%3E%3Cpath d="M11 8h2v8h-2v-8zM8 11h8v2H8v-2z" fill="white"/%3E%3C/svg%3E`,rescue:`data:image/svg+xml,%3Csvg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"%3E%3Ccircle cx="12" cy="12" r="10" fill="${encodeURIComponent(o)}"/%3E%3Ctext x="50%25" y="50%25" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="8px" fill="white" font-weight="bold"%3ER%3C/text%3E%3C/svg%3E`,hazmat:`data:image/svg+xml,%3Csvg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"%3E%3Ccircle cx="12" cy="12" r="10" fill="${encodeURIComponent(o)}"/%3E%3Ctext x="50%25" y="50%25" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="8px" fill="white" font-weight="bold"%3EH%3C/text%3E%3C/svg%3E`,alarm:`data:image/svg+xml,%3Csvg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"%3E%3Ccircle cx="12" cy="12" r="10" fill="${encodeURIComponent(o)}"/%3E%3Ctext x="50%25" y="50%25" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="8px" fill="white" font-weight="bold"%3EA%3C/text%3E%3C/svg%3E`};return i[A]||i.fire};class _{static transformToFireMapPro(o,i={toolId:"fire-map-pro"}){const a=[],n=[],t=[];let c=0,d=0;o.forEach((e,r)=>{try{const s=e.incident_id||e["Incident ID"]||e.incidentId||e.id,h=parseFloat(e.latitude||e.Latitude||e.lat),l=parseFloat(e.longitude||e.Longitude||e.lng||e.lon);if(!s){a.push(`Row ${r+1}: Missing Incident ID`),d++;return}if(isNaN(h)||isNaN(l)){a.push(`Row ${r+1}: Invalid or missing coordinates`),d++;return}const m=e.incident_type||e["Incident Type"]||e.incidentType||e.type||"Unknown",g=e.incident_date||e["Incident Date"]||e.incidentDate||e.date,f=e.incident_time||e["Incident Time"]||e.incidentTime||e.time,u=e.address||e.Address||"",y=e.city||e.City||"",T=e.state||e.State||"",w=e.priority||e.Priority||"",v=e.responding_unit||e.Station||e.station||"",I=e.response_category||e["Response Category"]||e.responseCategory||"",x=(typeof m=="string"?m:String(m||"")).toLowerCase(),p=E[x]||E.fire,F={id:`incident-${s}`,type:"marker",title:`${m} - ${s}`,description:`${m} incident${u?` at ${u}`:""}${y?`, ${y}`:""}${T?`, ${T}`:""}`,coordinates:[l,h],style:{color:p.color,icon:{id:`${p.icon}-icon`,name:p.icon,category:p.category,url:D(p.icon,p.color),size:"medium",color:p.color,anchor:[12,24],popupAnchor:[0,-24]}},properties:{incidentId:s,incidentType:m,incidentDate:g,incidentTime:f,address:u,city:y,state:T,priority:w,station:v,responseCategory:I,coordinates:{latitude:h,longitude:l},fullAddress:[u,y,T].filter(Boolean).join(", "),dateTime:g&&f?`${g} ${f}`:g||"",displayText:`${m}${w?` (${w})`:""}${v?` - Station ${v}`:""}`},layerId:"imported-incidents",created:new Date,modified:new Date};t.push(F),c++,g||n.push(`Row ${r+1}: Missing incident date`),!u&&!y&&n.push(`Row ${r+1}: Missing address information`)}catch(s){a.push(`Row ${r+1}: ${s instanceof Error?s.message:"Unknown error"}`),d++}});const R={id:"imported-incidents",name:`Imported Incidents (${t.length})`,visible:!0,opacity:1,zIndex:1e3,type:"feature",features:t,style:{defaultStyle:{color:"#dc2626",fillColor:"#dc2626",fillOpacity:.7,weight:2,opacity:1}},metadata:{description:`Incident data imported from Data Formatter - ${t.length} incidents`,source:"Data Formatter",created:new Date,featureCount:t.length,bounds:t.length>0?this.calculateBounds(t):void 0}};return{success:a.length===0||c>0,data:{layer:R,features:t},errors:a,warnings:n,metadata:{totalRecords:o.length,successfulRecords:c,skippedRecords:d}}}static transformToResponseTimeAnalyzer(o,i={toolId:"response-time-analyzer"}){var R;console.log("🔥 DATA TRANSFORMER - transformToResponseTimeAnalyzer() called"),console.log("🔥 DATA TRANSFORMER - incidents.length:",o.length),console.log("🔥 DATA TRANSFORMER - first incident:",o[0]),console.log("🔥 DATA TRANSFORMER - first incident field names:",Object.keys(o[0]));const a=[],n=[],t=[];let c=0,d=0;return o.forEach((e,r)=>{try{const s=e.incident_id||e["Incident ID"]||e.incidentId||e.id||e.incident_number,h=e.incident_date||e["Incident Date"]||e.incidentDate||e.date;if(!s){a.push(`Row ${r+1}: Missing Incident ID`),d++;return}if(!h){a.push(`Row ${r+1}: Missing Incident Date`),d++;return}console.log(`🔥 TRANSFORMER ROW ${r+1} - ACTUAL FIELD NAMES:`,Object.keys(e));let l=e.incident_time;if(console.log(`🔥 TRANSFORMER ROW ${r+1} - Primary field ID 'incident_time': "${l}"`),!l){const g=["Call Received Date/Time","Call Received Time","Call Receive Time","call received time","call receive time","Incident Time","incident time","incidentTime","time"];for(const f of g)if(e[f]){l=e[f],console.log(`🔄 TRANSFORMER ROW ${r+1} - Using original field fallback "${f}": "${l}"`);break}}console.log(`🔥 TRANSFORMER ROW ${r+1} - Selected incidentTime: "${l}"`),l&&/^\d{1,2}\/\d{1,2}\/\d{2,4}$/.test(l.trim())&&(console.warn(`⚠️ DATA QUALITY WARNING ROW ${r+1}: incidentTime appears to be date-only format: "${l}"`),console.warn("⚠️ This may cause unrealistic dispatch time calculations. Consider using a field with full datetime information."));const m={incidentId:String(s),incidentDate:String(h),incidentTime:l,dispatchTime:e.dispatch_time||e["Dispatch Time"]||e.dispatchTime,enRouteTime:e.enroute_time||e["En Route Time"]||e.enRouteTime,arrivalTime:e.arrival_time||e["Arrival Time"]||e.arrivalTime||e.arrive_time||e["On Scene Time"],clearTime:e.clear_time||e["Clear Time"]||e.clearTime,latitude:parseFloat(e.latitude||e.Latitude),longitude:parseFloat(e.longitude||e.Longitude),incidentType:e.incident_type||e["Incident Type"]||e.incidentType||e.type,respondingUnit:e.responding_unit||e.Station||e.station||e.unit||e.unit_id,address:e.address||e.Address,city:e.city||e.City,state:e.state||e.State,zipCode:e.zip_code||e["Zip Code"]||e.zipCode,priority:e.priority||e.Priority};console.log(`🔥 TRANSFORMER ROW ${r+1} - Final record incidentTime: "${m.incidentTime}"`),t.push(m),c++}catch(s){a.push(`Row ${r+1}: ${s instanceof Error?s.message:"Unknown error"}`),d++}}),console.log("🔥 DATA TRANSFORMER - Processing complete"),console.log("🔥 DATA TRANSFORMER - successfulRecords:",c),console.log("🔥 DATA TRANSFORMER - errors:",a),console.log("🔥 DATA TRANSFORMER - first transformed record:",t[0]),console.log("🔥 DATA TRANSFORMER - first transformed record incidentTime:",(R=t[0])==null?void 0:R.incidentTime),{success:a.length===0||c>0,data:t,errors:a,warnings:n,metadata:{totalRecords:o.length,successfulRecords:c,skippedRecords:d}}}static calculateBounds(o){const i=o.filter(t=>t.type==="marker").map(t=>t.coordinates);if(i.length===0)return;const a=i.map(t=>t[1]),n=i.map(t=>t[0]);return{north:Math.max(...a),south:Math.min(...a),east:Math.max(...n),west:Math.min(...n)}}static validateDataForTool(o,i){if(!o||o.length===0)return{compatible:!1,missingFields:i.requiredFields,availableOptionalFields:[]};const a=Object.keys(o[0]),n=i.requiredFields.filter(c=>!a.includes(c)),t=i.optionalFields?i.optionalFields.filter(c=>a.includes(c)):[];return{compatible:n.length===0,missingFields:n,availableOptionalFields:t}}}export{_ as D,b as E,O as T};
