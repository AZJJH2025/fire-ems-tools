import{j as e,r,B as h}from"./index-BlPlfC_D.js";import{L as x}from"./leaflet-d_RHNoV2.js";import{c as _e,P as ie,T as c}from"./Typography-D6SmKD5-.js";import{T as F,A as be,U as ge,E as Re}from"./Edit-B8MnBIrU.js";import{f as U,C as Z,A as se,D as Ee,T as re,L as Me,h as Ne,i as De,j as $e,F as Fe,N as Ge,d as he,x as Be,a as me,b as xe,c as fe,e as ye}from"./TextField-sqdAR_-5.js";import{L as Oe,S as pe}from"./Place-ChWR1HPB.js";import{A as le,a as ce,E as de,b as ue}from"./ExpandMore-BlZrMabW.js";import{B as J}from"./Button-BGaxuWQf.js";import{D as Ue}from"./Delete-BBpXzUnN.js";import{T as We}from"./Timeline-Dssm6a_R.js";import{R as Ve,a as ve}from"./RadioGroup-Xb8Uq7wD.js";import{M as je}from"./Map-BqHfVHpJ.js";import{D as Je,M as qe,E as He}from"./Menu-KgwsyBGx.js";import{A as Qe}from"./Assessment-c_xexUYv.js";import{S as Ze}from"./Settings-ca5BjCWj.js";import{I as Ke}from"./Info-B1i7ozQO.js";import"./Popper-CSMRB3m1.js";import"./FormGroup-Z5N8L-30.js";const Xe=_e(e.jsx("path",{d:"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4m8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7"})),Ye=({stations:d,jurisdictionBoundary:m,coverageStandard:q,onStationAdd:H,onStationSelect:ee,onAnalysisUpdate:N,analysisTriggered:G})=>{const Q=r.useRef(null),p=r.useRef(null),g=r.useRef(!1),[f,K]=r.useState(!1),[w,z]=r.useState(!1),[i,l]=r.useState({stations:!0,isochrones:!0,gaps:!0,boundaries:!0}),[I,k]=r.useState("idle"),[X,_]=r.useState([]),[D,R]=r.useState([]),j={nfpa1710:{name:"NFPA 1710 (Career Departments)",travelTime:240,responseTimeGoal:480,coverageGoal:90,travelSpeed:35},nfpa1720:{name:"NFPA 1720 (Volunteer Departments)",travelTime:480,responseTimeGoal:600,coverageGoal:80,travelSpeed:35}}[q],W=(o,t)=>t.type==="Polygon"?A(o,t.coordinates[0]):t.type==="MultiPolygon"?t.coordinates.some(n=>A(o,n[0])):!1,A=(o,t)=>{const n=o.lng,a=o.lat;let s=!1;for(let y=0,b=t.length-1;y<t.length;b=y++){const T=t[y][0],P=t[y][1],S=t[b][0],C=t[b][1];P>a!=C>a&&n<(S-T)*(a-P)/(C-P)+T&&(s=!s)}return s},E=r.useCallback(()=>{if(!(!Q.current||p.current))try{x.Icon.Default.mergeOptions({iconRetinaUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png",iconUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png",shadowUrl:"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png"});const o=x.map(Q.current).setView([39.8283,-98.5795],4);x.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"¬© OpenStreetMap contributors",maxZoom:19}).addTo(o),console.log("üó∫Ô∏è Using OpenStreetMap tiles like other working components"),console.log("üó∫Ô∏è Leaflet marker icons configured with CDN URLs"),p.current=o,K(!0),console.log("üó∫Ô∏è Coverage map initialized successfully"),o.on("click",v)}catch(o){console.error("‚ùå Failed to initialize coverage map:",o),k("error")}},[]),v=r.useCallback(o=>{if(!w||!H)return;const{lat:t,lng:n}=o.latlng,a={station_id:`STATION_${Date.now()}`,station_name:"New Station",latitude:t,longitude:n,station_type:"engine",operational_status:"active"};H(a),z(!1),console.log("üöí New station placed at:",t,n)},[w,H]),L=r.useCallback(()=>{if(!(!p.current||!f))try{const o=p.current;if(o.eachLayer(t=>{t.options&&t.options.stationType==="station"&&o.removeLayer(t)}),d.forEach(t=>{const n=x.marker([t.latitude,t.longitude],{stationType:"station"}).addTo(o),a=`
          <div>
            <h4>${t.station_name}</h4>
            <p><strong>ID:</strong> ${t.station_id}</p>
            <p><strong>Type:</strong> ${t.station_type||"Unknown"}</p>
            <p><strong>Apparatus:</strong> ${t.apparatus_count||"N/A"}</p>
            <p><strong>Status:</strong> ${t.operational_status||"Unknown"}</p>
          </div>
        `;n.bindPopup(a),n.on("click",()=>{ee&&ee(t)})}),d.length>0){const t=x.latLngBounds(d.map(n=>[n.latitude,n.longitude]));o.fitBounds(t,{padding:[50,50]})}console.log("üìç Updated",d.length,"station markers")}catch(o){console.error("‚ùå Failed to update station markers:",o)}},[d,f]),B=r.useCallback(()=>{var o;if(!(!p.current||!f))try{const t=p.current;if(t.eachLayer(n=>{n.options&&n.options.layerType==="boundary"&&t.removeLayer(n)}),m&&i.boundaries){console.log("üó∫Ô∏è Adding jurisdiction boundary to map");const n=x.geoJSON(m,{layerType:"boundary",style:{color:"#ff6b35",weight:3,opacity:.8,fillColor:"#ff6b35",fillOpacity:.1,dashArray:"5, 5"}}).addTo(t);if(m.features&&((o=m.features[0])!=null&&o.properties)){const a=m.features[0].properties,s=`
            <div>
              <h4>${a.name||"Jurisdiction Boundary"}</h4>
              ${a.population?`<p><strong>Population:</strong> ${a.population.toLocaleString()}</p>`:""}
              ${a.area_sq_miles?`<p><strong>Area:</strong> ${a.area_sq_miles} sq miles</p>`:""}
              ${a.county?`<p><strong>County:</strong> ${a.county}</p>`:""}
              ${a.state?`<p><strong>State:</strong> ${a.state}</p>`:""}
            </div>
          `;n.bindPopup(s)}d.length===0&&t.fitBounds(n.getBounds(),{padding:[20,20]}),console.log("‚úÖ Jurisdiction boundary added to map")}}catch(t){console.error("‚ùå Failed to update jurisdiction boundary:",t)}},[m,f,i.boundaries,d.length]),M=r.useCallback(async()=>{if(!(!p.current||!f||d.length===0)){if(g.current){console.log("üîÑ Isochrone generation already in progress, skipping...");return}g.current=!0,k("analyzing");try{const o=p.current;o.eachLayer(s=>{s.options&&s.options.layerType==="isochrone"&&o.removeLayer(s)});const t=d.map(async s=>u(s));(await Promise.all(t)).forEach((s,y)=>{s&&oe(s,d[y])}),k("complete");const a=Ie();N&&N(a),console.log("‚úÖ Generated isochrones for",d.length,"stations")}catch(o){console.error("‚ùå Failed to generate isochrones:",o),k("error")}finally{g.current=!1}}},[d,f,j]),u=async o=>{const t=j.travelTime/60,n=j.travelSpeed*1609.34*t/60;return{center:[o.latitude,o.longitude],radius:n,travelTime:j.travelTime,stationId:o.station_id}},oe=(o,t)=>{if(p.current)try{const n=p.current;x.circle(o.center,{radius:o.radius,layerType:"isochrone",color:"#2196f3",fillColor:"#2196f3",fillOpacity:.1,weight:2}).addTo(n).bindPopup(`
        <div>
          <h4>${t.station_name} Coverage</h4>
          <p><strong>Travel Time:</strong> ${o.travelTime/60} minutes</p>
          <p><strong>Standard:</strong> ${j.name}</p>
        </div>
      `)}catch(n){console.error("‚ùå Failed to add isochrone to map:",n)}},ne=r.useCallback(async()=>{if(!p.current||d.length===0){console.warn("Cannot perform analysis: missing map or stations");return}k("analyzing"),console.log("üîç Starting comprehensive coverage gap analysis...");try{const o=d.map(s=>{const y=j.travelTime/60,b=j.travelSpeed*1609.34*y/60;return{station:s,center:[s.latitude,s.longitude],radius:b,coverageCircle:x.circle([s.latitude,s.longitude],{radius:b})}}),t=await Se(o);_(t);const n=Ce(t);R(n);const a=Ae(o,t);Le(t),Te(n),k("complete"),N&&N({...a,gaps:t,recommendations:n,totalStations:d.length,coverageStandard:q,analysisDate:new Date().toISOString()}),console.log("‚úÖ Coverage analysis complete:",{gaps:t.length,recommendations:n.length,metrics:a})}catch(o){console.error("‚ùå Coverage analysis failed:",o),k("error")}},[d,m,j,N]),Se=async o=>{const t=[];let n,a=!1;if(m&&(m.features||m.type))console.log("üèõÔ∏è Jurisdiction boundary detected:",m),n=x.geoJSON(m).getBounds(),a=!0,console.log("üó∫Ô∏è Using jurisdiction boundary for analysis area");else{if(d.length===0)return t;const S=x.latLngBounds(d.map($=>[$.latitude,$.longitude])),C=.05;n=x.latLngBounds([[S.getSouth()-C,S.getWest()-C],[S.getNorth()+C,S.getEast()+C]]),console.log("üó∫Ô∏è Using station bounds with padding for analysis area (no jurisdiction boundary)")}const s=.01,y=n.getSouth(),b=n.getNorth(),T=n.getWest(),P=n.getEast();console.log("üìã Analyzing coverage with grid:",{bounds:{minLat:y,maxLat:b,minLng:T,maxLng:P},gridSize:s,totalCells:Math.ceil((b-y)/s)*Math.ceil((P-T)/s)});for(let S=y;S<b;S+=s)for(let C=T;C<P;C+=s){const $=x.latLng(S+s/2,C+s/2);let O=!0;if(a){O=!1;try{const V=x.latLng($.lat,$.lng);x.geoJSON(m).eachLayer(ae=>{ae.getBounds&&ae.getBounds().contains(V)&&ae.feature&&ae.feature.geometry&&(O=W(V,ae.feature.geometry))})}catch(V){console.warn("Point-in-polygon check failed, defaulting to bounds check:",V),O=!0}}if(!O)continue;let Y=!1;for(const V of o)if($.distanceTo(x.latLng(V.center[0],V.center[1]))<=V.radius){Y=!0;break}Y||t.push({id:`gap_${t.length+1}`,center:[$.lat,$.lng],bounds:{north:S+s,south:S,east:C+s,west:C},type:"uncovered_area",severity:"high",estimatedPopulation:Math.floor(Math.random()*1e3)+100})}return console.log(`üî¥ Identified ${t.length} coverage gaps`),t},Ce=o=>{const t=[];return o.length===0?(console.log("‚úÖ No coverage gaps found - no station recommendations needed"),t):(we(o).forEach((a,s)=>{const y=ke(a);t.push({id:`recommendation_${s+1}`,position:y,type:"new_station",priority:a.length>3?"high":"medium",gapsCovered:a.length,estimatedPopulationServed:a.reduce((b,T)=>b+T.estimatedPopulation,0),reasoning:`Recommended to cover ${a.length} identified gaps in this area`})}),console.log(`üìç Generated ${t.length} station recommendations`),t)},we=o=>{const t=[],n=new Set,a=5e3;return o.forEach((s,y)=>{if(n.has(y))return;const b=[s];n.add(y),o.forEach((T,P)=>{if(n.has(P))return;x.latLng(s.center[0],s.center[1]).distanceTo(x.latLng(T.center[0],T.center[1]))<=a&&(b.push(T),n.add(P))}),b.length>0&&t.push(b)}),t},ke=o=>{const t=o.reduce((a,s)=>a+s.center[0],0)/o.length,n=o.reduce((a,s)=>a+s.center[1],0)/o.length;return[t,n]},Ae=(o,t)=>{if(!m)return{coverageMetrics:{populationCovered:0,areaCovered:0,nfpaCompliance:0},identifiedGaps:t.length,recommendedStations:0};const a=x.geoJSON(m).getBounds(),s=(a.getNorth()-a.getSouth())*(a.getEast()-a.getWest()),y=t.length*.01*.01,T=Math.max(0,s-y)/s*100,P=t.reduce((O,Y)=>O+Y.estimatedPopulation,0)+d.length*5e3,S=Math.max(0,P-t.reduce((O,Y)=>O+Y.estimatedPopulation,0)),C=P>0?S/P*100:100,$=Math.min(T,C);return{coverageMetrics:{populationCovered:Math.round(C*10)/10,areaCovered:Math.round(T*10)/10,nfpaCompliance:Math.round($*10)/10},identifiedGaps:t.length,recommendedStations:D.length}},Le=o=>{if(!p.current||!i.gaps)return;const t=p.current;t.eachLayer(n=>{n.options&&n.options.layerType==="gap"&&t.removeLayer(n)}),o.forEach(n=>{x.rectangle([[n.bounds.south,n.bounds.west],[n.bounds.north,n.bounds.east]],{layerType:"gap",color:"#ff4444",fillColor:"#ff4444",fillOpacity:.3,weight:1}).addTo(t).bindPopup(`
        <div>
          <h4>üî¥ Coverage Gap</h4>
          <p><strong>Severity:</strong> ${n.severity}</p>
          <p><strong>Est. Population:</strong> ${n.estimatedPopulation}</p>
          <p><strong>Area:</strong> ~1 km¬≤</p>
        </div>
      `)}),console.log(`üìç Visualized ${o.length} coverage gaps on map`)},Te=o=>{if(!p.current)return;const t=p.current;t.eachLayer(n=>{n.options&&n.options.layerType==="recommendation"&&t.removeLayer(n)}),o.forEach(n=>{x.marker(n.position,{layerType:"recommendation",icon:x.divIcon({className:"recommended-station-marker",html:'<div style="background-color: #4CAF50; color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">+</div>',iconSize:[30,30],iconAnchor:[15,15]})}).addTo(t).bindPopup(`
        <div>
          <h4>üü¢ Recommended Station</h4>
          <p><strong>Priority:</strong> ${n.priority}</p>
          <p><strong>Gaps Covered:</strong> ${n.gapsCovered}</p>
          <p><strong>Population Served:</strong> ~${n.estimatedPopulationServed}</p>
          <p><strong>Reasoning:</strong> ${n.reasoning}</p>
        </div>
      `)}),console.log(`üü¢ Visualized ${o.length} station recommendations on map`)},Ie=()=>ne(),Pe=r.useCallback(()=>{z(!w),console.log("üéØ Station placement mode:",w?"OFF":"ON")},[w]);return r.useEffect(()=>(E(),()=>{p.current&&(p.current.remove(),p.current=null)}),[]),r.useEffect(()=>{L()},[d,f]),r.useEffect(()=>{B()},[m,f,i.boundaries]),r.useEffect(()=>{if(d.length>0&&i.isochrones){const o=setTimeout(()=>{M()},1e3);return()=>clearTimeout(o)}},[d,q,i.isochrones]),r.useEffect(()=>{if(G&&G>0){const o=setTimeout(()=>{ne()},500);return()=>clearTimeout(o)}},[G,ne]),e.jsxs(h,{sx:{height:"100%",position:"relative"},children:[e.jsx(h,{ref:Q,sx:{height:"100%",width:"100%",borderRadius:1,overflow:"hidden",cursor:w?"crosshair":"default"}}),e.jsxs(ie,{elevation:2,sx:{position:"absolute",top:16,right:16,p:1,display:"flex",flexDirection:"column",gap:1,zIndex:1e3},children:[e.jsx(F,{title:"Add Station",children:e.jsx(U,{color:w?"primary":"default",onClick:Pe,sx:{bgcolor:w?"primary.main":"transparent",color:w?"white":"inherit","&:hover":{bgcolor:w?"primary.dark":"action.hover"}},children:e.jsx(be,{})})}),e.jsx(F,{title:"Center on Location",children:e.jsx(U,{children:e.jsx(Xe,{})})}),e.jsx(F,{title:`Toggle Boundary: ${i.boundaries?"ON":"OFF"}`,children:e.jsx(U,{color:i.boundaries?"primary":"default",onClick:()=>l(o=>({...o,boundaries:!o.boundaries})),sx:{bgcolor:i.boundaries?"primary.main":"transparent",color:i.boundaries?"white":"inherit","&:hover":{bgcolor:i.boundaries?"primary.dark":"action.hover"}},children:e.jsx(Oe,{})})})]}),e.jsxs(h,{sx:{position:"absolute",bottom:16,left:16,zIndex:1e3},children:[e.jsx(Z,{label:j.name,size:"small",color:"primary",sx:{mr:1}}),I==="analyzing"&&e.jsx(Z,{label:"Analyzing Coverage...",size:"small",color:"warning"}),I==="complete"&&e.jsx(Z,{label:"Analysis Complete",size:"small",color:"success"}),I==="error"&&e.jsx(Z,{label:"Analysis Error",size:"small",color:"error"})]}),w&&e.jsx(se,{severity:"info",sx:{position:"absolute",top:16,left:16,right:80,zIndex:1e3},children:"Click on the map to place a new fire station"}),d.length===0&&f&&e.jsxs(h,{sx:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",textAlign:"center",zIndex:1e3,bgcolor:"rgba(255, 255, 255, 0.9)",p:3,borderRadius:2,boxShadow:2},children:[e.jsx(c,{variant:"h6",gutterBottom:!0,children:"No Stations Loaded"}),e.jsx(c,{variant:"body2",color:"text.secondary",children:"Upload station data or use the + button to add stations manually"})]})]})},et=({stations:d,coverageStandard:m,jurisdictionBoundary:q,onStationDataImport:H,onCoverageStandardChange:ee,onStationAdd:N,onStationEdit:G,onStationDelete:Q,onBoundaryUpload:p})=>{const[g,f]=r.useState({station_id:"",station_name:"",latitude:"",longitude:"",station_type:"engine"}),K=r.useCallback(()=>{if(!g.station_id||!g.station_name||!g.latitude||!g.longitude){alert("Please fill in all required fields");return}const i={...g,latitude:parseFloat(g.latitude),longitude:parseFloat(g.longitude),operational_status:"active"};N(i),f({station_id:"",station_name:"",latitude:"",longitude:"",station_type:"engine"})},[g,N]),w=r.useCallback(i=>{var k;const l=(k=i.target.files)==null?void 0:k[0];if(!l)return;console.log("üó∫Ô∏è Processing uploaded boundary file:",l.name,"Size:",l.size,"bytes");const I=new FileReader;I.onload=X=>{var _;try{const D=(_=X.target)==null?void 0:_.result;if(l.name.toLowerCase().endsWith(".geojson")||l.name.toLowerCase().endsWith(".json")){const R=JSON.parse(D);console.log("‚úÖ Successfully parsed GeoJSON boundary file"),p&&p(R)}else{alert("Please upload a GeoJSON (.geojson or .json) file for jurisdiction boundaries");return}i.target.value=""}catch(D){console.error("‚ùå Error parsing boundary file:",D),alert("Error parsing boundary file. Please check the format and try again.")}},I.readAsText(l)},[p]),z=r.useCallback(i=>{var k;const l=(k=i.target.files)==null?void 0:k[0];if(!l)return;console.log("üìÅ Processing uploaded file:",l.name,"Size:",l.size,"bytes");const I=new FileReader;I.onload=X=>{var _;try{const R=((_=X.target)==null?void 0:_.result).split(`
`).filter(A=>A.trim());if(R.length<2){alert("CSV file appears to be empty or invalid");return}const te=A=>{const E=[];let v="",L=!1;for(let B=0;B<A.length;B++){const M=A[B];M==='"'?L=!L:M===","&&!L?(E.push(v.trim()),v=""):v+=M}return E.push(v.trim()),E},j=te(R[0]);console.log("üìä CSV Headers:",j);const W=[];for(let A=1;A<R.length;A++){const E=te(R[A]);if(E.length!==j.length){console.warn(`Row ${A} has ${E.length} values but ${j.length} headers. Skipping.`);continue}const v={};j.forEach((L,B)=>{const M=E[B];L==="latitude"||L==="longitude"?v[L]=parseFloat(M):L==="apparatus_count"||L==="staffing_level"?v[L]=parseInt(M)||0:v[L]=M}),v.station_id&&v.station_name&&!isNaN(v.latitude)&&!isNaN(v.longitude)?W.push(v):console.warn(`Row ${A} missing required fields:`,v)}if(console.log("‚úÖ Successfully parsed",W.length,"stations from CSV"),W.length===0){alert("No valid stations found in CSV file. Please check the format.");return}H(W),i.target.value=""}catch(D){console.error("‚ùå Error parsing CSV file:",D),alert("Error parsing CSV file. Please check the format and try again.")}},I.readAsText(l)},[H]);return e.jsxs(h,{sx:{width:"100%",height:"100%",overflow:"auto"},children:[e.jsxs(h,{sx:{p:2,borderBottom:1,borderColor:"divider"},children:[e.jsx(c,{variant:"h6",gutterBottom:!0,children:"Station Coverage Analysis"}),e.jsx(c,{variant:"body2",color:"text.secondary",children:"Configure stations and analysis parameters"})]}),e.jsxs(le,{defaultExpanded:!0,children:[e.jsx(ce,{expandIcon:e.jsx(de,{}),children:e.jsxs(h,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(pe,{color:"primary"}),e.jsx(c,{variant:"subtitle1",children:"Station Data"}),e.jsx(Z,{label:`${d.length} stations`,size:"small"})]})}),e.jsxs(ue,{children:[e.jsxs(h,{sx:{mb:2},children:[e.jsx(c,{variant:"subtitle2",gutterBottom:!0,children:"Import Station Data"}),e.jsxs(J,{variant:"outlined",component:"label",startIcon:e.jsx(ge,{}),fullWidth:!0,sx:{mb:2},children:["Upload CSV/Excel",e.jsx("input",{type:"file",hidden:!0,accept:".csv,.xlsx,.xls",onChange:z})]}),e.jsx(c,{variant:"caption",color:"text.secondary",children:"Required fields: Station ID, Name, Latitude, Longitude"})]}),e.jsx(Ee,{sx:{my:2}}),e.jsxs(h,{children:[e.jsx(c,{variant:"subtitle2",gutterBottom:!0,children:"Add Station Manually"}),e.jsx(re,{fullWidth:!0,label:"Station ID",value:g.station_id,onChange:i=>f(l=>({...l,station_id:i.target.value})),size:"small",sx:{mb:1}}),e.jsx(re,{fullWidth:!0,label:"Station Name",value:g.station_name,onChange:i=>f(l=>({...l,station_name:i.target.value})),size:"small",sx:{mb:1}}),e.jsxs(h,{sx:{display:"flex",gap:1,mb:1},children:[e.jsx(re,{label:"Latitude",value:g.latitude,onChange:i=>f(l=>({...l,latitude:i.target.value})),size:"small",type:"number",sx:{flex:1}}),e.jsx(re,{label:"Longitude",value:g.longitude,onChange:i=>f(l=>({...l,longitude:i.target.value})),size:"small",type:"number",sx:{flex:1}})]}),e.jsxs(re,{fullWidth:!0,select:!0,label:"Station Type",value:g.station_type,onChange:i=>f(l=>({...l,station_type:i.target.value})),size:"small",sx:{mb:2},SelectProps:{native:!0},children:[e.jsx("option",{value:"engine",children:"Engine Company"}),e.jsx("option",{value:"ladder",children:"Ladder Company"}),e.jsx("option",{value:"rescue",children:"Rescue Company"}),e.jsx("option",{value:"hazmat",children:"Hazmat Unit"}),e.jsx("option",{value:"ems",children:"EMS Station"})]}),e.jsx(J,{fullWidth:!0,variant:"contained",onClick:K,startIcon:e.jsx(be,{}),children:"Add Station"})]}),d.length>0&&e.jsxs(h,{sx:{mt:2},children:[e.jsx(c,{variant:"subtitle2",gutterBottom:!0,children:"Current Stations"}),e.jsx(Me,{dense:!0,children:d.map((i,l)=>e.jsxs(Ne,{secondaryAction:e.jsxs(h,{children:[e.jsx(F,{title:"Edit Station",children:e.jsx(U,{size:"small",onClick:()=>G(i),children:e.jsx(Re,{fontSize:"small"})})}),e.jsx(F,{title:"Delete Station",children:e.jsx(U,{size:"small",onClick:()=>Q(i.station_id),children:e.jsx(Ue,{fontSize:"small"})})})]}),children:[e.jsx(De,{children:e.jsx(pe,{fontSize:"small"})}),e.jsx($e,{primary:i.station_name,secondary:`${i.station_id} ‚Ä¢ ${i.station_type}`})]},i.station_id||l))})]})]})]}),e.jsxs(le,{defaultExpanded:!0,children:[e.jsx(ce,{expandIcon:e.jsx(de,{}),children:e.jsxs(h,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(We,{color:"primary"}),e.jsx(c,{variant:"subtitle1",children:"NFPA Standards"}),e.jsx(Z,{label:m.toUpperCase(),size:"small",color:"primary"})]})}),e.jsxs(ue,{children:[e.jsxs(Fe,{component:"fieldset",children:[e.jsx(Ge,{component:"legend",children:"Response Time Standard"}),e.jsxs(Ve,{value:m,onChange:i=>ee(i.target.value),children:[e.jsx(he,{value:"nfpa1710",control:e.jsx(ve,{}),label:e.jsxs(h,{children:[e.jsx(c,{variant:"body2",children:"NFPA 1710 - Career Departments"}),e.jsx(c,{variant:"caption",color:"text.secondary",children:"4-minute travel time ‚Ä¢ 90% coverage requirement"})]})}),e.jsx(he,{value:"nfpa1720",control:e.jsx(ve,{}),label:e.jsxs(h,{children:[e.jsx(c,{variant:"body2",children:"NFPA 1720 - Volunteer Departments"}),e.jsx(c,{variant:"caption",color:"text.secondary",children:"8-minute travel time ‚Ä¢ 80% coverage requirement"})]})})]})]}),e.jsx(se,{severity:"info",sx:{mt:2},children:e.jsx(c,{variant:"body2",children:"NFPA standards define response time requirements for fire departments. Career departments (1710) have stricter requirements than volunteer departments (1720)."})})]})]}),e.jsxs(le,{children:[e.jsx(ce,{expandIcon:e.jsx(de,{}),children:e.jsxs(h,{sx:{display:"flex",alignItems:"center",gap:1},children:[e.jsx(je,{color:"primary"}),e.jsx(c,{variant:"subtitle1",children:"Analysis Configuration"})]})}),e.jsxs(ue,{children:[e.jsx(c,{variant:"body2",paragraph:!0,children:"Configure analysis parameters and jurisdiction boundaries."}),e.jsx(J,{variant:"outlined",fullWidth:!0,sx:{mb:1},children:"Draw Jurisdiction Boundary"}),e.jsxs(J,{variant:"outlined",component:"label",fullWidth:!0,sx:{mb:1},startIcon:e.jsx(ge,{}),children:["Upload Boundary File",e.jsx("input",{type:"file",hidden:!0,accept:".geojson,.json",onChange:w})]}),q&&e.jsx(se,{severity:"success",sx:{mb:1},children:e.jsx(c,{variant:"body2",children:"Jurisdiction boundary loaded successfully"})}),e.jsx(c,{variant:"caption",color:"text.secondary",children:"Define your service area to calculate accurate coverage metrics"})]})]})]})},vt=({mode:d="analysis"})=>{const[m,q]=r.useState(!0),[H,ee]=r.useState("coverage"),[N,G]=r.useState(!1),[Q,p]=r.useState(!1),[g,f]=r.useState([]),[K,w]=r.useState(null),[z,i]=r.useState("nfpa1710"),[l,I]=r.useState(null),[k,X]=r.useState(0),_=400,D=r.useCallback(u=>{console.log("üöí Importing station data:",u.length,"stations"),f(u),I(null)},[]),R=r.useCallback(u=>{console.log("‚ûï Adding new station:",u),f(oe=>[...oe,u])},[]),te=r.useCallback(u=>{console.log("üéØ Station selected:",u.station_name)},[]),j=r.useCallback(u=>{console.log("üìä Analysis updated:",u),I(u)},[]),W=r.useCallback(u=>{console.log("‚úèÔ∏è Edit station:",u.station_id)},[]),A=r.useCallback(u=>{console.log("üóëÔ∏è Delete station:",u),f(oe=>oe.filter(ne=>ne.station_id!==u))},[]),E=r.useCallback(u=>{console.log("üìè Coverage standard changed to:",u),i(u),I(null)},[]),v=r.useCallback(u=>{console.log("üó∫Ô∏è Boundary data uploaded:",u),w(u)},[]),L=r.useCallback(()=>{if(console.log("üìä Running coverage analysis with NFPA standard:",z),g.length===0){console.warn("No stations available for analysis");return}I(null),X(u=>u+1),console.log("‚úÖ Analysis triggered - results will be provided by map component")},[g,z]),B=r.useCallback(()=>{console.log("üìã Opening station coverage report generator"),G(!0)},[]),M=r.useCallback(()=>{q(u=>!u)},[]);return e.jsxs(h,{sx:{display:"flex",height:"100vh",overflow:"hidden"},children:[e.jsx(Je,{variant:"persistent",anchor:"left",open:m,sx:{width:m?_:0,flexShrink:0,"& .MuiDrawer-paper":{width:_,boxSizing:"border-box"}},children:e.jsx(et,{stations:g,coverageStandard:z,jurisdictionBoundary:K,onStationDataImport:D,onCoverageStandardChange:E,onStationAdd:R,onStationEdit:W,onStationDelete:A,onBoundaryUpload:v})}),e.jsxs(h,{component:"main",sx:{flexGrow:1,display:"flex",flexDirection:"column",overflow:"hidden",transition:"margin 0.3s ease-in-out",marginLeft:m?`${_}px`:"0px"},children:[e.jsx(ie,{elevation:1,sx:{borderRadius:0,borderBottom:1,borderColor:"divider"},children:e.jsxs(Be,{sx:{justifyContent:"space-between",px:3},children:[e.jsxs(h,{sx:{display:"flex",alignItems:"center",gap:2},children:[e.jsx(pe,{color:"primary",sx:{fontSize:28}}),e.jsxs(h,{children:[e.jsx(c,{variant:"h5",component:"h1",sx:{fontWeight:600,color:"primary.main"},children:"Station Coverage Optimizer"}),e.jsx(c,{variant:"body2",color:"text.secondary",children:"Enterprise coverage analysis with NFPA compliance assessment"})]}),z&&e.jsx(Z,{label:z.toUpperCase(),size:"small",color:"primary",variant:"outlined"})]}),e.jsxs(h,{sx:{display:"flex",gap:1},children:[e.jsx(F,{title:"Toggle Sidebar",children:e.jsx(U,{onClick:M,children:e.jsx(qe,{})})}),e.jsx(F,{title:"Run Coverage Analysis",children:e.jsx(J,{variant:"contained",color:"primary",startIcon:e.jsx(Qe,{}),onClick:L,disabled:g.length===0,children:"Analyze Coverage"})}),e.jsx(F,{title:"Generate Professional Report",children:e.jsx(U,{color:"primary",onClick:B,disabled:!l,sx:{bgcolor:"primary.main",color:"white","&:hover":{bgcolor:"primary.dark"},"&:disabled":{bgcolor:"grey.300",color:"grey.500"}},children:e.jsx(He,{})})}),e.jsx(F,{title:"Settings",children:e.jsx(U,{onClick:()=>p(!0),children:e.jsx(Ze,{})})}),e.jsx(F,{title:"About Station Coverage Optimizer",children:e.jsx(U,{children:e.jsx(Ke,{})})})]})]})}),e.jsx(h,{sx:{flexGrow:1,display:"flex",overflow:"hidden"},children:e.jsx(h,{sx:{flexGrow:1,p:2,overflow:"auto"},children:g.length===0?e.jsxs(ie,{sx:{p:4,textAlign:"center",mt:4},children:[e.jsx(je,{sx:{fontSize:64,color:"text.secondary",mb:2}}),e.jsx(c,{variant:"h5",gutterBottom:!0,children:"Welcome to Station Coverage Optimizer"}),e.jsx(c,{variant:"body1",color:"text.secondary",paragraph:!0,children:"Upload station data to begin coverage analysis and optimization."}),e.jsxs(se,{severity:"info",sx:{mt:2,textAlign:"left"},children:[e.jsx(c,{variant:"subtitle2",gutterBottom:!0,children:"Getting Started:"}),e.jsxs(c,{variant:"body2",component:"div",children:["1. Use the sidebar to upload station data (CSV, Excel) or import from Data Formatter",e.jsx("br",{}),"2. Define your jurisdiction boundary (draw or upload)",e.jsx("br",{}),"3. Select NFPA standard (1710 for career, 1720 for volunteer departments)",e.jsx("br",{}),"4. Run coverage analysis to identify gaps and optimization opportunities"]})]})]}):e.jsxs(ie,{sx:{height:"100%",display:"flex",flexDirection:"column"},children:[e.jsxs(h,{sx:{p:2,borderBottom:1,borderColor:"divider"},children:[e.jsx(c,{variant:"h6",gutterBottom:!0,children:"Interactive Coverage Map"}),e.jsxs(c,{variant:"body2",color:"text.secondary",gutterBottom:!0,children:[g.length," stations loaded ‚Ä¢ ",z.toUpperCase()," standards"]}),l&&e.jsxs(se,{severity:"success",sx:{mt:1},children:["Coverage analysis: ",l.coverageMetrics.nfpaCompliance.toFixed(1),"% NFPA compliance ‚Ä¢",l.identifiedGaps," gaps identified ‚Ä¢",l.recommendedStations," stations recommended"]})]}),e.jsx(h,{sx:{flexGrow:1,minHeight:0},children:e.jsx(Ye,{stations:g,jurisdictionBoundary:K,coverageStandard:z,onStationAdd:R,onStationSelect:te,onAnalysisUpdate:j,analysisTriggered:k})})]})})})]}),e.jsxs(me,{open:Q,onClose:()=>p(!1),maxWidth:"md",fullWidth:!0,children:[e.jsx(xe,{children:"Station Coverage Settings"}),e.jsx(fe,{children:e.jsx(c,{variant:"body1",children:"Settings panel for NFPA standards, travel speeds, response time thresholds, etc."})}),e.jsx(ye,{children:e.jsx(J,{onClick:()=>p(!1),children:"Close"})})]}),e.jsxs(me,{open:N,onClose:()=>G(!1),maxWidth:"lg",fullWidth:!0,children:[e.jsx(xe,{children:"Generate Coverage Report"}),e.jsx(fe,{children:e.jsx(c,{variant:"body1",children:"Professional report generator for station coverage analysis and recommendations."})}),e.jsxs(ye,{children:[e.jsx(J,{onClick:()=>G(!1),children:"Close"}),e.jsx(J,{variant:"contained",children:"Generate PDF"})]})]})]})};export{vt as default};
